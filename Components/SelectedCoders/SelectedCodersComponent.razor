@using riwitalentfrontend.Services;
@using riwitalentfrontend.Components
@using riwitalentfrontend.Models;
@inject ICoderService coderService;
@inject IModalService model;
@inject IEmailService email;
@inject HttpClient Http
@inject IAlertService alertService;
@namespace riwitalentfrontend.Components



<MudChipSet T="string" AllClosable OnClose="RemoveCoderFromGroup">

        @foreach (var selectedCoder in SelectedCoders)
        {
            <MudChip Text="@($"{selectedCoder.FirstName} {selectedCoder.FirstLastName}")">
                <AvatarContent>
                    <MudAvatar>
                        <MudImage Src="@selectedCoder.Photo"></MudImage>
                    </MudAvatar>
                </AvatarContent>
            </MudChip> 
        }
</MudChipSet>


<MudStack Justify="Justify.FlexEnd" Class="gap-2 ma-2 pa-2" Style="height: 100vh;">
    @if(ButtonText == true)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddCoderHandler">Iniciar Proceso</MudButton>
    }
    else if(ButtonText == false)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddCoderHandler">Cargar Coders</MudButton>
    }
</MudStack>

@code {

    [Parameter] 
    public bool? ButtonText { get; set; } = true;

    [Parameter]
    public List<Coder> SelectedCoders { get; set; } = new List<Coder>();
    [Parameter]
    public EventCallback AddCodersToGroupAsync { get; set; }
    [Parameter]
    public EventCallback<Coder> OnCoderAdded { get; set; }

    private bool _open;
    private string groupId;
    private bool sendEmail;
    private int _i = 1;
    private List<string> _values = new();
    public void Add() => _values.Add("Value " + (_i++));

   private void ToggleDrawer()
    {
        _open = !_open;
    } 


    public async Task AddCoderHandler()
    {
        if(AddCodersToGroupAsync.HasDelegate)
        {
            await AddCodersToGroupAsync.InvokeAsync();
        }

        await alertService.AddCodersToGroup();
        sendEmail = await email.SendEmailCompany(groupId);

        if(sendEmail)
        {
            Console.WriteLine("El correo se envió de manera correcta");
        }
        else
        {
            Console.WriteLine("Falló el envío de correo");
        }

    }
    public async Task AddCoderToGroup(Coder coder)
    { 
        if (!SelectedCoders.Contains(coder))
        {
            SelectedCoders.Add(coder); // Agregar el coder a la lista de seleccionados
            await OnCoderAdded.InvokeAsync(coder);
        }

       
    }    

    public void RemoveCoderFromGroup(MudChip<string> chip)
    {
        var coderToRemove = SelectedCoders.FirstOrDefault(c => $"{c.FirstName} {c.FirstLastName}" == chip.Text);
        if (coderToRemove != null)
        {
            SelectedCoders.Remove(coderToRemove); // Eliminar el coder de la lista de seleccionados
        }
    }   

}
