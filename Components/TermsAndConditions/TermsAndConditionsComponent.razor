@namespace riwitalentfrontend.Components
@inject IModalService ModalService
@using Blazored.Modal.Services
@inject IGroupService GroupService
@inject IEmailService EmailService
@inject TermsAndConditionsService _termsAndConditionsService
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal;
@inject AlertService AlertService;
@using riwitalentfrontend.Models;
@using riwitalentfrontend.Models.DTOs;
@using riwitalentfrontend.Services.Interfaces;
@using riwitalentfrontend.Services.Implementations;


<head>
    <link rel="stylesheet" href="css/Components/TermsAndConditionsComponent.css">
</head>



<BlazoredModalTitle>
    Términos y Condiciones
</BlazoredModalTitle>
<BlazoredModalContent>
    <p>Por favor, acepte los términos y condiciones para continuar.</p>
</BlazoredModalContent>
<BlazoredModalFooter>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
</BlazoredModalFooter>

@code {
    [Parameter]
    public string? groupId { get; set; }
    [Parameter] public string AcceptedEmail { get; set; }
    [Parameter] public string CreatorEmail { get; set; }
    private Group? group;

    protected override async Task OnInitializedAsync()
    {
        group = await GroupService.GetGroupByIdAsync(groupId);
        Console.WriteLine($"Group recibido en el modal: {group?.Id ?? "null"}");
    }

    private async Task Aceptar()
    {
        if (group == null)
        {
            Console.WriteLine("El grupo no se pudo cargar.");
            return;
        }

        // Mostrar alerta de confirmación antes de guardar
        await AlertService.SaveChangesRegister(); // Alerta de confirmación

        // Crear el nuevo registro de términos
        var newTerms = new TermAndCondition
        {
            IsActive = true,
            Accepted = true,
            GroupId = group.Id,
            Clicked_Date = DateTime.UtcNow,
            AcceptedEmail = AcceptedEmail,
            CreatorEmail = CreatorEmail
        };

        bool success = await _termsAndConditionsService.AcceptTermsAsync(newTerms);
        if (success)
        {
            // Actualizar AcceptedTerms en el grupo
            group.AcceptedTerms = true;
            var updateResult = await GroupService.Update(group); // Actualizar el grupo en la base de datos

            if (updateResult)
            {
                Console.WriteLine("Grupo actualizado correctamente.");

                // Enviar correo después de aceptar los términos
                var emailSent = await EmailService.SendEmailTest(group.Id);
                if (emailSent)
                {
                    await Swal.FireAsync("Correo Enviado", "El correo ha sido enviado con éxito.", SweetAlertIcon.Success);
                    NavigationManager.NavigateTo($"/HomeClient/{groupId}");
                }
                else
                {
                    await Swal.FireAsync("Error", "No se pudo enviar el correo.", SweetAlertIcon.Error);
                }

                // Redirigir al usuario después de aceptar los términos
                NavigationManager.NavigateTo($"/HomeClient/{groupId}");
            }
            else
            {
                Console.WriteLine("No se pudo actualizar el grupo.");
            }
        }
        else
        {
            await AlertService.Warning();
        }
    }

    private async Task Cancelar()
    {

        await AlertService.DeleteRegister();
        var newTerms = new TermAndCondition
        {
            IsActive = true,
            Accepted = false,
            GroupId = group.Id,
            Clicked_Date = DateTime.UtcNow,
            AcceptedEmail = AcceptedEmail,
            CreatorEmail = CreatorEmail
        };

        bool success = await _termsAndConditionsService.AcceptTermsAsync(newTerms);
        if (success)
        {
            NavigationManager.NavigateTo($"external-access/{groupId}");
        }
        else
        {
            await AlertService.Warning();
        }
    }
}
