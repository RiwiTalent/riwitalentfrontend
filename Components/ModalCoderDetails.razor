@inherits Blazored.Modal.BlazoredModal
@using riwitalentfrontend.Services;
@using riwitalentfrontend.Components
@using riwitalentfrontend.Models;
@inject ICoderService coderService;
@inject SweetAlertService Swal;
@inject AlertService AlertService;
@inject NavigationManager NavigationManager

<head>
    <link rel="stylesheet" href="css/Components/ModalCoderDetails.css">
    
</head>

@if (Coder != null)
{
    <BlazoredModalTitle>
        @* <MudImage class="photo-modal" Src="@Coder.Photo" /> *@
    </BlazoredModalTitle>

    <BlazoredModalContent class="content-modal">

        <MudPaper Elevation="0" class="content__left-container">
            <!-- Contenido Izquierdo -->

            <MudPaper Elevation="0" class="content_left-container_top">
                @if (!string.IsNullOrEmpty(Coder.Photo))
                {
                    <MudImage class="photo-modal-coder" Src="@Coder.Photo" />
                }
                else
                {
                    <MudAvatar Color="Color.Primary" Class="photo-modal-coder">
                        @((Coder.FirstName?[0] ?? ' ') + (Coder.FirstLastName?[0] ?? ' '))
                    </MudAvatar>
                }

                <p class="content_left-container_top__stack">@Coder.Stack</p>
                <p class="content_left-container_top__standar">@Coder.Status</p>
                <MudButton EndIcon="@Icons.Material.Outlined.FileDownload" class="content_left-container_top__hv">Descargar CV</MudButton>
            </MudPaper>

            <MudPaper Elevation="0" class="content_left-container_bot">
                <h4 class="content_left-container_bot__process">Proceso actual</h4>
                <MudPaper Elevation="0" class="content_left-container_bot__group">
                    <div role="img" class="mud-avatar mud-avatar-group mud-avatar-medium mud-avatar-filled mud-avatar-filled-primary mud-elevation-0" style="">D</div>

                    <div class="content_left-container_bot-text_group">
                        <h5 class="content_left-container_bot-text_group__name">Grupo Celsia</h5>
                        <p class="content_left-container_bot-text_group__description">Proceso de selección</p>
                    </div>
                </MudPaper>
            </MudPaper>

           @if (!isEditMode)
            {
                <MudButton StartIcon="@Icons.Material.Outlined.Edit" 
                            class="content_left-container_top__edit" 
                            Variant="Variant.Filled" 
                            OnClick="EnableEditMode">
                    Editar
                </MudButton>
            }
            else
            {
                <MudButton StartIcon="@Icons.Material.Outlined.Save" 
                            class="content_left-container_top__save" 
                            Variant="Variant.Filled" 
                            OnClick="UpdateCoder">
                    Guardar
                </MudButton>
            }




        </MudPaper>

        <MudPaper Elevation="0" class="content__right-container">
            <MudPaper Elevation="0" class="content__right-container_top">
                <h4 class="content__right-container_top__titulo_personal">Información personal</h4>

                <form action="" class="content__right-container_top__form" Valid="formValid">

                    <div class="content__right-container_top_boxes-inputs">
                        <label class="content__right-container_top__labels" for="FirstName">Primer Nombre</label>
                        <input type="text" class="@($"content__right-container_top__input {(isEditMode ? "input-enabled" : "")}")" 
                            id="FirstName" 
                            @bind="Coder.FirstName" 
                            disabled="@(isEditMode ? null : "disabled")" />
                    </div>

                    <div class="content__right-container_top_boxes-inputs">
                        <label class="content__right-container_top__labels" for="SecondName">Segundo Nombre</label>
                        <input type="text" class="@($"content__right-container_top__input {(isEditMode ? "input-enabled" : "")}")" 
                            id="SecondName" 
                            @bind="Coder.SecondName" 
                            disabled="@(isEditMode ? null : "disabled")" />
                    </div>

                    <div class="content__right-container_top_boxes-inputs">
                        <label class="content__right-container_top__labels" for="FirstLastName">Primer Apellido</label>
                        <input type="text" class="@($"content__right-container_top__input {(isEditMode ? "input-enabled" : "")}")" 
                            id="FirstLastName" 
                            @bind="Coder.FirstLastName" 
                            disabled="@(isEditMode ? null : "disabled")" />
                    </div>

                    <div class="content__right-container_top_boxes-inputs">
                        <label class="content__right-container_top__labels" for="SecondLastName">Segundo Apellido</label>
                        <input type="text" class="@($"content__right-container_top__input {(isEditMode ? "input-enabled" : "")}")" 
                            id="SecondLastName" 
                            @bind="Coder.SecondLastName" 
                            disabled="@(isEditMode ? null : "disabled")" />
                    </div>

                    <div class="content__right-container_top_boxes-inputs">
                        <label class="content__right-container_top__labels" for="Email">Correo</label>
                        <input type="email" class="@($"content__right-container_top__input {(isEditMode ? "input-enabled" : "")}")" 
                            id="Email" 
                            @bind="Coder.Email" 
                            disabled="@(isEditMode ? null : "disabled")" />
                    </div>

                    <div class="content__right-container_top_boxes-inputs">
                        <label class="content__right-container_top__labels" for="Age">Edad</label>
                        <input type="number" class="@($"content__right-container_top__input {(isEditMode ? "input-enabled" : "")}")" 
                            id="Age" 
                            @bind="Coder.Age" 
                            min="18" max="100" step="1" 
                            disabled="@(isEditMode ? null : "disabled")" />
                    </div>

                </form>


            </MudPaper>

            <!-- Sección de Información Profesional -->
            <MudPaper Elevation="0" class="content__right-container_mid">
                <h4 class="content__right-container_mid__title">Información Profesional</h4>
                <p class="content__right-container_mid__text">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec justo metus. Duis scelerisque pellentesque nunc, semper tristique libero feugiat a.</p>
            </MudPaper>

            <!-- Sección de Habilidades Técnicas -->
            <MudPaper Elevation="0" class="content__right-bot">
                <h5 class="content__right-container_bot__title">Habilidades Técnicas</h5>
                <div class="content__right-container_bot__skills">
                    @if (Coder.Skills != null)
                    {
                        <div class="badges">
                            @for (int i = 0; i < Coder.Skills.Count && i < 6; i++)
                            {
                                <span class="badge">@Coder.Skills[i].Language_Programming</span>
                            }
                        </div>
                    }
                    else
                    {
                        <p>Contenido no disponible...</p>
                    }
                </div>
            </MudPaper>
        </MudPaper>
    </BlazoredModalContent>
}
else
{
    <p>Loading...</p>
}

@code {

    private List<Coder>? coders;
    [Parameter] public Coder Coder { get; set; }

    private MudForm coderForm;
    private string buttonText = "Editar";

    private bool isEditMode = false;

    private void EnableEditMode()
    {
        isEditMode = true;
        Console.WriteLine($"isEditMode: {isEditMode}");

        StateHasChanged(); 
    }


    private async Task UpdateCoder()
    {
        // Mostrar alerta de confirmación
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Icon = SweetAlertIcon.Success,
            Title = "¿Estás seguro/a de que deseas guardar los cambios de este registro?",
            Text = "Esta acción actualizará la información y no podrá recuperarse.",
            ShowCancelButton = true,
            ConfirmButtonColor = "#5ACCA4",
            ConfirmButtonText = "Si, Confirmar",
            CancelButtonColor = "#fff",
            CancelButtonText = "<button style='color:#5ACCA4; background-color:#fff'>No, Cancelar</button>"
        });

        // Si el usuario confirma, proceder con la actualización
        if (result.IsConfirmed)
        {
            // Llamada al servicio para actualizar el coder
            var response = await coderService.UpdateCoderAsync(Coder);

            if (response)
            {
                // Cambiar de vuelta al modo de visualización
                isEditMode = false;

                // Mostrar mensaje de éxito
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Los datos se han guardado exitosamente",
                    Icon = SweetAlertIcon.Success,
                    ShowConfirmButton = false 
                });


                NavigationManager.NavigateTo("/home");
            }
            else
            {
                Console.WriteLine("Error al actualizar el coder");
            }
        }
        else
        {

            Console.WriteLine("Actualización cancelada");
        }
    }

}