@namespace riwitalentfrontend.Components

@using riwitalentfrontend.Components
;
@inject CoderService CoderService;
@inject IModalService Model;
@using riwitalentfrontend.Components

<head>
    <link rel="stylesheet" href="css/CardComponent.css">
</head>

<MudPaper Class="container-filter" Elevation="1">
    <MudPaper Elevation="0" Class="d-flex align-center">
        @* <MudText Class="text-resultado" Typo="Typo.h6">@coders.Count Coders</MudText> *@
        <MudText Class="text-resultado" Typo="Typo.h6">@_totalCoders Grupos</MudText>
    </MudPaper>

    <MudButton OnClick="CleanFilters" Class=""> Limpiar </MudButton>

    <MudButton Color="Color.Primary" OnClick="FilterCoders" Class=""> Filtrar </MudButton>

    <MudPaper Elevation="0" Style="display: flex; justify-content: start; align-items: center; gap: 10px">
        <MudTextField Adornment="@Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Delete" @bind-Value="_searchText" Placeholder="Buscar aquí..." Class="search" Immediate="true" TextChanged="FilterCoders" />
    </MudPaper>

    <MudPaper Elevation="0" Class="d-flex justify-space-around align-center container-select">
        <InputSelect @bind-Value="_skills" Class="search-container" @onchange="CleanFilterSkill">
            <option value="">Tecnologia</option>
            <option value="JavaScript">JavaScript</option>
            <option value="C#">C#</option>
            <option value="Python">Python</option>
            <option value="Java">Java</option>
            <option value="Ruby">Ruby</option>
            <option value="PHP">PHP</option>
            <option value="React">React</option>
            <option value="clear">Limpiar Filtro</option> <!-- Opción para limpiar -->
        </InputSelect>

        <InputSelect @bind-Value="_Language_Level" Class="search-container" @onchange="CleanFilterEnglishLevel">
            <option value="">Nivel inglés</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
            <option value="clear">Limpiar Filtro</option> <!-- Opción para limpiar -->
        </InputSelect>

    </MudPaper>
</MudPaper>



@if(_coders != null)
{
    <div class="cards">
        @foreach (var coder in _paginatedCoders)
        {
            <MudCard>
                @if (coder.Photo != null)
                {
                    <MudImage Fluid="true" Src="@ImageNullOrEmpty(coder.Photo)" Alt="Mony the dog" Width="250" Height="300"/>

                    @* <MudImage class=""
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                    </MudImage> *@
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                        <div class="cards__container">
                            <div class="cards__profile">
                                <div class="cards__coder">
                                    <h6 class="">@coder.FirstName @coder.FirstLastName</h6>
                                    <p>@coder.Stack
                                        @coder.LanguageSkills.Language_Level
                                    </p>
                                </div>
                                    <a><img src="images/group-add.svg" alt="icon"></a>
                            </div>
                            @*badges*@
                            @if(coder.Skills != null)
                            {
                                <div class="cards__badges">
                                    @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                    {
                                        <div class="cards__badge">@coder.Skills[i].Language_Programming</div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Contenido no disponible...</p>
                            }
                            @*Buttons*@
                            <div class="cards__button--primary">
                                <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                            </div>
                        </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled" ShowPreviousButton="false" ShowNextButton="false" Count="@_pag" PageSize="@_pageSize" TotalItems="@_totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code
{    

    public string ButtonDetails = "Detalle";
    private List<Coder>? _coders;

    //pagination
    private List<Coder>? _paginatedCoders;
    private int _totalCoders;
    private int _currentPage = 1;
    private int _pageSize = 8;
    private int _pag;

    //filtrado
    private List<Coder>? _filterCoder;

    // Filtros
    private string? _searchText;
    private string? _skills;
    private string? _Language_Level;
    private bool _filterApplied = false;
    

    protected override async Task OnInitializedAsync()
    {
        //Llamado a la api
        try
        {
            _coders = await CoderService.GetCodersAsync();
            _totalCoders = _coders.Count;
            _pag = (int)Math.Ceiling((double)_totalCoders / _pageSize);
            Console.WriteLine(_pag);
            LoadCoders(_currentPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            _coders = await CoderService.GetCodersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private void OnPageChanged(int pageNumber)
    {
        _currentPage = pageNumber;
        LoadCoders(_currentPage);
    }
    

    private async Task FilterCoders()
    {
        _coders = await CoderService.GetCodersAsync();

        // Filtrar por nombres o apellidos
        if (!string.IsNullOrEmpty(_searchText))
        {
            var searchTerms = _searchText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            _coders = _coders.Where(c =>
            {
                var fullName = $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower();
                return searchTerms.All(term => fullName.Contains(term.ToLower()));
            }).ToList();
            _filterApplied = true;
        }

        // Filtro de Skills
        if (!string.IsNullOrEmpty(_skills))
        {
            _coders = _coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(_skills, StringComparison.OrdinalIgnoreCase))).ToList();
        }

        // Filtro de Nivel de Lenguaje
        if (!string.IsNullOrEmpty(_Language_Level))
        {
            _coders = _coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(_Language_Level, StringComparison.OrdinalIgnoreCase)).ToList();
            _filterApplied = true;
        }

        _totalCoders = _coders.Count;
        _pag = (int)Math.Ceiling((double)_totalCoders / _pageSize);
        LoadCoders(_currentPage);
        StateHasChanged();
    }

    private async Task CleanFilters()
    {
        _searchText = "";
        _skills = "";
        _Language_Level = "";

        _coders = await CoderService.GetCodersAsync();
        _totalCoders = _coders.Count;
        _pag = (int)Math.Ceiling((double)_totalCoders / _pageSize);

        _currentPage = 1;
        LoadCoders(_currentPage);
        StateHasChanged();
    }

    private async Task CleanFilterSkill(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            _skills = "";  // Resetea el valor de skills
            await FilterCoders();  // Aplica los filtros
        }
        
    }

    private async Task CleanFilterEnglishLevel(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            _Language_Level = "";  // Resetea el valor de Language_Level
            await FilterCoders();  // Aplica los filtros
        }
    }

    private void LoadCoders(int pageNumber)
    {
        _paginatedCoders = _coders
            ?.Skip((pageNumber - 1) * _pageSize)
            .Take(_pageSize)
            .ToList();
    }

    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = _coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = Model.Show<ModalCoderDetails>("", parameters);
            await modal.Result;
        }
    }
    
    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }
}