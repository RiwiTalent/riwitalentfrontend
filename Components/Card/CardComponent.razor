@using riwitalentfrontend.Services;
@using riwitalentfrontend.Components
@using riwitalentfrontend.Models;
@inject ICoderService coderService;
@inject IModalService model;
@namespace riwitalentfrontend.Components



<MudContainer Class="d-flex" Style="margin: 15px auto auto auto ; padding: 0; width: 85%;">
    <MudText Class="text-resultado" Typo="Typo.h5" style="font-weight: 700;">@totalCoders Coders</MudText>
</MudContainer>



<ToolBarContent Class="d-flex container-filter align-center mt-13 gap-1" Elevation="1" >
    <MudGrid>
        <MudItem xs="12" Class="d-flex flex-grow-1 gap-3 justify-space-between">

            <MudTextField Placeholder="Buscar aquí..." @bind-Value="searchText" Immediate="true" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Search" AdornmentColor="Color.Primary">
            </MudTextField>

            <MudSelect T="string" Label="Tecnología" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" MultiSelection="true" @bind-Value="skills"  @onchange="CleanFilterSkill" @bind-SelectedValues="tecnologies">
                @foreach (var technology in technologies)
                {
                    <MudSelectItem T="string" Value="@technology.Name">@technology.Name</MudSelectItem>
                }
            </MudSelect>

            <!-- <MudSelect T="string" Label="Estado" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" @bind-Value="skills" Class="search-container" @onchange="CleanFilterSkill">
                <MudSelectItem Value="\"JavaScript\"">JavaScript</MudSelectItem>
                <MudSelectItem Value="\"CSharp\"">CSharp</MudSelectItem>
            </MudSelect> -->

            <!-- <MudSelect T="string" Label="Tecnología" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" @bind-Value="skills" Class="search-container" @onchange="CleanFilterSkill">
                <MudSelectItem Value="\"JavaScript\"">JavaScript</MudSelectItem>
                <MudSelectItem Value="\"CSharp\"">CSharp</MudSelectItem>
                <MudSelectItem Value="\"Python\"">Python</MudSelectItem>
                <MudSelectItem Value="\"Java\"">Java</MudSelectItem>
                <MudSelectItem Value="\"Ruby\"">Ruby</MudSelectItem>
                <MudSelectItem Value="\"PHP\"">PHP</MudSelectItem>
                <MudSelectItem Value="\"React\"">React</MudSelectItem>
                <MudSelectItem Value="\"clear\"">Limpiar Filtro</MudSelectItem>
            </MudSelect> -->

            <!-- <MudSelect T="string" Label="Nivel inglés" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" @bind-Value="Language_Level" Class="search-container" @onchange="CleanFilterEnglishLevel">
                <MudSelectItem Value="\"A1\"">A1</MudSelectItem>
                <MudSelectItem Value="\"A2\"">A2</MudSelectItem>
                <MudSelectItem Value="\"B1\"">B1</MudSelectItem>
                <MudSelectItem Value="\"B2\"">B2</MudSelectItem>
                <MudSelectItem Value="\"C1\"">C1</MudSelectItem>
                <MudSelectItem Value="\"C2\"">C2</MudSelectItem>
                <MudSelectItem Value="\"clear\"">Limpiar Filtro</MudSelectItem>
            </MudSelect> -->    

           
            <MudButton OnClick="CleanFilters" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Outlined.FilterAltOff">Limpiar Filtros</MudButton>

            <MudButton OnClick="FilterCoders" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.Tune">Filtrar</MudButton>
        </MudItem>
    </MudGrid>
</ToolBarContent>


@if (FilterInGroup == true)
{
   var filteredCoders = coders != null 
        ? paginatedCoders.Where(coder => coder.GroupId != null && coder.GroupId.Contains(groupId)).ToList()
        : new List<Coder>();

    if (filteredCoders.Any())
    {
        <div class="cards">
            @foreach (var coder in filteredCoders)
            {
                <MudCard style="height:300px" class="relative rounded-lg overflow-hidden mud-card">
                    @if (coder.Photo != null)
                    {
                        <MudImage Fluid="true"
                        ObjetctFit="Cover" Src="@ImageNullOrEmpty(coder.Photo)" Alt="Mony the dog" Width="250" Height="300"/>
                    }
                    else
                    {
                        <p>Cargando...</p>
                    }
                    <MudCardContent class="d-flex justify-space-between relative  mud-card-content">
                            <div class="cards__container">
                            

                                <div class="cards__profile">
                                    <div class="cards__coder">
                                        <h6 class="">@coder.FirstName @coder.FirstLastName</h6>
                                        <p>@coder.Stack</p>
                                    </div>
                                        <MudContainer Class="d-flex justify-end flex-grow-1">

                                    <MudChipSet T="string" @bind-SelectedChips="SelectedCoders" SelectionMode="SelectionMode.MultiSelection" CheckMark>
                                        <MudChip Style="color:white;" Class="border-solid border-2 mud-b mud-border-white" Icon="@Icons.Material.Rounded.PersonAddAlt1" Variant="Variant.Text" @onclick="() => AddCoderToGroup(coder)">
                                        </MudChip>
                                    </MudChipSet>

                                        </MudContainer>
                                </div>
                                @*badges*@
                                @if(coder.Skills != null)
                                {
                                    <div class="cards__badges">
                                        @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                        {
                                            var skill = coder.Skills[i].Language_Programming;
                                            var badgeColor = GetColor(skill);
                                            var badgeIcon = GetIcon(skill);

                                            <MudChip T="string" Style=@($"background-color: {badgeColor}; color: white")>
                                                <i class="@badgeIcon"></i>@skill
                                            </MudChip>

                                        }
                                    </div>
                                }
                                else
                                {
                                    <p>Contenido no disponible...</p>
                                }
                                @*Buttons*@
                                <div class="cards__button--primary">
                                    <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                                </div>
                            </div>
                    </MudCardContent>
                </MudCard>
            }
        </div>

        <div class="container-pagination">
            <div class="container-box">
                <MudPagination class="mud-pagination mud-pagination-item mud-button" Variant="Variant.Filled" ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize" TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
            </div>
        </div>
    }
    else
    {
        <p>No se encontraron coders en este grupo.</p>
    }
}

else if(coders != null)
{
    <div class="cards">
            @foreach (var coder in paginatedCoders)
            {
                <MudCard style="height:300px" class="relative rounded-lg overflow-hidden mud-card">
                    @if (coder.Photo != null)
                    {
                        <MudImage Fluid="true"
                        Src="@ImageNullOrEmpty(coder.Photo)" Alt="@coder.FirstName" Width="250" Height="300"/>
                    }
                    else
                    {
                        <p>Cargando...</p>
                    }
                    <MudCardContent class="d-flex justify-space-between relative  mud-card-content">
                            <div class="cards__container">
                            

                                <div class="cards__profile">
                                    <div class="cards__coder">
                                        <h6 class="">@coder.FirstName @coder.FirstLastName</h6>
                                        <p>@coder.Stack</p>
                                    </div>
                                        <MudContainer Class="d-flex justify-end flex-grow-1">

                                    <MudChipSet T="string" @bind-SelectedChips="SelectedCoders" SelectionMode="SelectionMode.MultiSelection" CheckMark>
                                        <MudChip Style="color:white;" Class="border-solid border-2 mud-b mud-border-white" Icon="@Icons.Material.Rounded.PersonAddAlt1" Variant="Variant.Text" @onclick="() => AddCoderToGroup(coder)">
                                        </MudChip>
                                    </MudChipSet>

                                        </MudContainer>
                                </div>
                                @*badges*@
                                @if(coder.Skills != null)
                                {
                                    <div class="cards__badges">
                                        @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                        {
                                            var skill = coder.Skills[i].Language_Programming;
                                            var badgeColor = GetColor(skill);
                                            var badgeIcon = GetIcon(skill);

                                            <MudChip T="string" Style=@($"background-color: {badgeColor}; color: white")>
                                                <i class="@badgeIcon"></i>@skill
                                            </MudChip>

                                        }
                                    </div>
                                }
                                else
                                {
                                    <p>Contenido no disponible...</p>
                                }
                                @*Buttons*@
                                <div class="cards__button--primary">
                                    <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                                </div>
                            </div>
                    </MudCardContent>
                </MudCard>
            }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination class="mud-pagination mud-pagination-item mud-button" Variant="Variant.Filled" ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize" TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>

}


@if (coders != null)
{
<div class="cardsCell">
    <MudCarousel TData="Coder" Class="mud-carousel" AutoCycle="false" CycleInterval="0" VisibleItems="2" Style="width: 100% ; display: flex; justify-content: center;">
        @foreach (var coder in paginatedCoders)
        {
        <MudCarouselItem>
            <MudCard>
                @if (coder.Photo != null)
                {
                <MudImage
                    Src="@coder.Photo"
                    Alt="profile" />
                }
                else
                {
                <p>@ImageNullOrEmpty(@coder.Photo)</p>
                }
                <MudCardContent>
                    <div class="cards__container">
                        <div class="cards__profile">
                            <div class="cards__coder">
                                <h3>@coder.FirstName @coder.FirstLastName</h3>
                                <p>@coder.Stack</p>
                            </div>
                            <a>
                                <img src="images/group-add.svg" alt="icon" />
                            </a>
                        </div>
                        @*badges*@
                        @if (coder.Skills != null)
                        {
                        <div class="cards__badges">
                            @for (int i = 0; i < coder.Skills.Count && i < 6; i++)
                            {
                            <div class="cards__badge">@coder.Skills[i].Language_Programming</div>
                            }
                        </div>
                        }
                        else
                        {
                        <p>Contenido no disponible...</p>
                        }
                        @*Buttons*@
                        <div class="cards__button--primary">
                            <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudCarouselItem>
        }
    </MudCarousel>
</div>
}

@code
{   
    [Parameter]
    public string? groupId { get; set; }


    [Parameter]
    public bool? FilterInGroup { get; set; }
    //SelectedCoders Component
    [Parameter]
    public List<Coder> SelectedCoders { get; set; } = new List<Coder>(); // Parámetro para recibir los coders seleccionados

    [Parameter]
    public EventCallback<Coder> OnCoderAdded { get; set; } // Callback para notificar cuando se añade un coder

    // Filter bar

    private bool _sortNameByLength;
    private bool _loading = true;
    // Technolies list select
     private string value { get; set; } = "Nothing selected";
    private IEnumerable<string> tecnologies { get; set; } = new HashSet<string>();
    private List<Technology> technologies = new List<Technology>();

    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //pagination
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int pag;

    //filtrado
    private List<Coder>? filterCoder;


    // Filtros
    private bool FilterApplied = false;
    private string? searchText;
    private string? skills;
    private string? status;
    private string? Language_Level;

    //Badges
    private List<Badge> badges = new List<Badge>();
    

  
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Filter: " + FilterInGroup);

        try
        {
            coders = await coderService.GetCodersAsync();

            if (coders == null || coders.Count == 0)
            {
                Console.WriteLine("No se encontraron coders o la lista está vacía.");
            }
            else
            {
                totalCoders = coders.Count;
                pag = (int)Math.Ceiling((double)totalCoders / pageSize);
                LoadCoders(currentPage);
            }

            foreach (var skill in coders)
            {
                if (skill.Skills != null)
                {
                    for (int i = 0; i < skill.Skills.Count; i++)
                    {
                        badges.Add(new Badge
                        {
                            Technology = skill.Skills[i].Language_Programming,
                            Color = GetColor(skill.Skills[i].Language_Programming),
                            Icon = GetIcon(skill.Skills[i].Language_Programming)
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }

        try
        {
            technologies = await TechnologiesService.GetTechnologiesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener las Tecnologías: {ex.Message}");
        }
    }

    private void LoadCoders(int pageNumber)
    {
        if (coders == null)
        {
            paginatedCoders = new List<Coder>();
            return;
        }

        paginatedCoders = coders
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        if (coders == null || coders.Count == 0)
        {
            Console.WriteLine("La lista de coders está vacía.");
        }
        else
        {
            Console.WriteLine($"Total de coders obtenidos: {coders.Count}");
        }

        if (paginatedCoders == null || paginatedCoders.Count == 0)
        {
            Console.WriteLine("La lista de paginatedCoders está vacía.");
        }
        else
        {
            Console.WriteLine($"Total de paginatedCoders: {paginatedCoders.Count}");
        }
    }


    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }

    private void AddCoderToGroup(Coder coder)
    {
        if (!SelectedCoders.Contains(coder))
        {
            SelectedCoders.Add(coder); // Agregar coder a la lista seleccionada
            OnCoderAdded.InvokeAsync(coder); // Invocar el evento
        }
    }

    private string GetColor(string skill)
    {
        return skill switch
        {
            // Technologies
            "CSharp" => "#239120",        
            ".Net" => "#512BD4",          
            "HTML" => "#FF0000",          
            "CSS" => "#0000FF",           
            "Bootstrap" => "#7952B3",    
            "JavaScript" => "#F7DF1E",    
            "TypeScript" => "#3178C6",    
            "Node.js" => "#339933",       
            "React" => "#61DAFB",         
            "Python" => "#3776AB",        
            "PHP" => "#777BB4",           
            "Java" => "#007396",          
            "Vue.js" => "#41B883",        
            "Azure" => "#0078D4",         
            "Ruby" => "#CC342D",          
            "Docker" => "#2496ED",
            "SpringBoot" => "#6DB33F",
            "Kubernetes" => "#326CE5",
            "Angular" => "#DD0031",
            "NextJS" => "#000000",
            "Flutter" => "#02569B",
            "Dart" => "#00BFFF",
            "Kotlin" => "#F44336",
            "Figma" => "#F24E1E",
            "VueJS" => "#42b883",
            "TailwindCSS" => "#38b2ac",
            "Astro" => "#FF5C7C",
            "AWS" => "#FF9900",
            
            // Databases
            "MySQL" => "#4479A1",         
            "SQL" => "#CC2927",           
            "PostgresSQL" => "#336791",   
            "MongoDb" => "#47A248",       
            _ => "#9E9E9E", 
        };
    }
    private string GetIcon(string skill)
    {
        return skill switch
        {
            "Terraform" => "simple-icons:terraform",
            "Docker" => "simple-icons:docker",
            "Astro" => "simple-icons:astro",
            "CSharp" => "simple-icons:csharp",
            "React" => "simple-icons:react",
            "Flutter" => "simple-icons:flutter",
            "Dart" => "simple-icons:dart",
            "Kotlin" => "simple-icons:kotlin",
            "Figma" => "simple-icons:figma",
            "TypeScript" => "simple-icons:typescript",
            "Ruby" => "simple-icons:ruby",
            "Java" => "simple-icons:java",
            "SpringBoot" => "simple-icons:spring",
            "Kubernetes" => "simple-icons:kubernetes",
            ".Net" => "simple-icons:.net",
            "JavaScript" => "simple-icons:javascript",
            "PHP" => "simple-icons:php",
            "CSS" => "simple-icons:css3",
            "Angular" => "simple-icons:angular",
            "TailwindCSS" => "simple-icons:tailwindcss",
            "HTML" => "simple-icons:html5",
            "Python" => "simple-icons:python",
            "Azure" => "simple-icons:azure",
            "SQL" => "simple-icons:mysql", 
            "MySQL" => "simple-icons:mysql",
            "MongoDb" => "simple-icons:mongodb",
            "PostgresSQL" => "simple-icons:postgresql",
            _ => "simple-icons:coder"
        };
    }
 

    private async Task FilterCoders()
    {
        coders = await coderService.GetCodersAsync();

        // Filtrar por nombres o apellidos
        if (!string.IsNullOrEmpty(searchText))
        {
            var searchTerms = searchText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            coders = coders.Where(c =>
            {
                var fullName = $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower();
                return searchTerms.All(term => fullName.Contains(term.ToLower()));
            }).ToList();
            FilterApplied = true;
        }

        // Filtro de Skills
        if (!string.IsNullOrEmpty(skills))
        {
            // Separar las skills por coma, suponiendo que la entrada es "skill1,skill2,skill3"
            var skillList = skills.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                .Select(s => s.Trim())
                                .ToList();

            // Filtrar los coders que tienen todas las skills en la lista
            coders = coders.Where(c => skillList.All(skill => 
                c.Skills.Any(s => s.Language_Programming.Contains(skill, StringComparison.OrdinalIgnoreCase))
            )).ToList();
        }

        // Filtro de Nivel de Lenguaje
        if (!string.IsNullOrEmpty(Language_Level))
        {
            coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(Language_Level, StringComparison.OrdinalIgnoreCase)).ToList();
            FilterApplied = true;
        }

        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);
        LoadCoders(currentPage);
        StateHasChanged();
    }

    private async Task CleanFilters()
    {
        searchText = "";
        skills = "";
        Language_Level = "";

        coders = await coderService.GetCodersAsync();
        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);

        currentPage = 1;
        LoadCoders(currentPage);
        StateHasChanged();
    }

    private async Task CleanFilterSkill(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            skills = "";  // Resetea el valor de skills
            await FilterCoders();  // Aplica los filtros
        }
        
    }

    private async Task CleanFilterEnglishLevel(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            Language_Level = "";  // Resetea el valor de Language_Level
            await FilterCoders();  // Aplica los filtros
        }
    }

    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("", parameters);
            await modal.Result;
        }
    }
    
    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {

        return "wwwroot/images/Avatar1.png";
        
    }
}
