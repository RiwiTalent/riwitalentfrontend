@using riwitalentfrontend.Services;
@using riwitalentfrontend.Components
@using riwitalentfrontend.Models;
@inject ICoderService coderService;
@inject IModalService model;
@namespace riwitalentfrontend.Components

<!-- <head>
    <link rel="stylesheet" href="css/Components/CardComponent.css">
</head> -->

<MudContainer Class="d-flex" Style="margin: 15px auto auto auto ; padding: 0; width: 85%;">
    <MudText Class="text-resultado" Typo="Typo.h6">@totalCoders Coders</MudText>
</MudContainer>


<MudPaper Class="container-filter" Elevation="1">
    <MudPaper Elevation="0" Style="display: flex; justify-content: start; align-items: center; gap: 10px;">
        <MudTextField StartIcon="@Icons.Material.Filled.Delete"
                      @bind-Value="searchText"
                      Placeholder="Buscar aquí..."
                      Class="search"
                      Immediate="true"
                      TextChanged="FilterCoders"/>
    </MudPaper>



    <MudPaper Elevation="0" Class="d-flex justify-space-around align-center container-select" Style="padding: 0; gap: 5px">

        <InputSelect @bind-Value="skills" Class="search-container" @onchange="CleanFilterSkill">
            <option value="">Estado</option>
            <option value="JavaScript">JavaScript</option>
            <option value="CSharp">CSharp</option>
        </InputSelect>

        <InputSelect @bind-Value="skills" Class="search-container" @onchange="CleanFilterSkill">
            <option value="">Tecnología</option>
            <option value="JavaScript">JavaScript</option>
            <option value="CSharp">CSharp</option>
            <option value="Python">Python</option>
            <option value="Java">Java</option>
            <option value="Ruby">Ruby</option>
            <option value="PHP">PHP</option>
            <option value="React">React</option>
            <option value="clear">Limpiar Filtro</option>
        </InputSelect>

        <InputSelect @bind-Value="Language_Level" Class="search-container" @onchange="CleanFilterEnglishLevel">
            <option value="">Nivel inglés</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
            <option value="clear">Limpiar Filtro</option>
        </InputSelect>
    </MudPaper>
    <MudPaper Elevation="0" Class="d-flex align-center justify-space-between" Style="padding: 10px;">
        <div>
            <MudButton OnClick="CleanFilters" Class="mr-2"> Limpiar </MudButton>
            <MudButton Color="Color.Primary" OnClick="FilterCoders"> Filtrar </MudButton>
        </div>
    </MudPaper>
</MudPaper>




@if(coders != null)
{
    <div class="cards">
        @foreach (var coder in paginatedCoders)
        {
            <MudCard>
                @if (coder.Photo != null)
                {
                    <MudImage Fluid="true"
                    ObjetctFit="Cover" Src="@ImageNullOrEmpty(coder.Photo)" Alt="Mony the dog" Width="250" Height="300"/>

                    @* <MudImage class=""
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                    </MudImage> *@
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                        <div class="cards__container">
                            <div class="cards__profile">
                                <div class="cards__coder">
                                    <h6 class="">@coder.FirstName @coder.FirstLastName</h6>
                                    <p>@coder.Stack</p>
                                </div>
                                    <a><img src="images/group-add.svg" alt="icon"></a>
                            </div>
                            @*badges*@
                            @if(coder.Skills != null)
                            {
                                <div class="cards__badges">
                                    @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                    {
                                        var skill = coder.Skills[i].Language_Programming;
                                        var badgeColor = GetColor(skill);
                                        var badgeIcon = GetIcon(skill);

                                        <MudChip T="string" Style=@($"background-color: {badgeColor}; color: white")>
                                            <i class="@badgeIcon"></i>@skill
                                        </MudChip>
                                        @* <div class="cards__badge">@coder.Skills[i].Language_Programming</div> *@
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Contenido no disponible...</p>
                            }
                            @*Buttons*@
                            <div class="cards__button--primary">
                                <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                            </div>
                        </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled" ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize" TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>

}

@if (coders != null)
{
<div class="cardsCell">
    <MudCarousel TData="Coder" Class="mud-carousel" AutoCycle="false" CycleInterval="0" VisibleItems="2" Style="width: 100% ; display: flex; justify-content: center;">
        @foreach (var coder in paginatedCoders)
        {
        <MudCarouselItem>
            <MudCard>
                @if (coder.Photo != null)
                {
                <MudImage
                    Src="@ImageNullOrEmpty(coder.Photo)"
                    Alt="profile" />
                }
                else
                {
                <p>Cargando...</p>
                }
                <MudCardContent>
                    <div class="cards__container">
                        <div class="cards__profile">
                            <div class="cards__coder">
                                <h3>@coder.FirstName @coder.FirstLastName</h3>
                                <p>@coder.Stack</p>
                            </div>
                            <a>
                                <img src="images/group-add.svg" alt="icon" />
                            </a>
                        </div>
                        @*badges*@
                        @if (coder.Skills != null)
                        {
                        <div class="cards__badges">
                            @for (int i = 0; i < coder.Skills.Count && i < 6; i++)
                            {
                            <div class="cards__badge">@coder.Skills[i].Language_Programming</div>
                            }
                        </div>
                        }
                        else
                        {
                        <p>Contenido no disponible...</p>
                        }
                        @*Buttons*@
                        <div class="cards__button--primary">
                            <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        </MudCarouselItem>
        }
    </MudCarousel>
</div>
}

@code
{    
    public bool CheckBox1 { get; set; } = false;
    public bool CheckBox2 { get; set; } = false;
    public bool CheckBox3 { get; set; } = false;

    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //pagination
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int pag;

    //filtrado
    private List<Coder>? filterCoder;

    // Filtros
    private string? searchText;
    private string? skills;
    private string? Language_Level;
    private bool FilterApplied = false;

    //Badges
    private List<Badge> badges = new List<Badge>();
    

    protected override async Task OnInitializedAsync()
    {
        //Llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            Console.WriteLine(pag);
            LoadCoders(currentPage);

            foreach (var skill in coders)
            {
                for(int i = 0; i < skill.Skills.Count; i++)
                {

                    badges.Add(new Badge{
                        Technology = skill.Skills[i].Language_Programming,
                        Color = GetColor(skill.ToString()),
                        Icon = GetIcon(skill.ToString())
                    });
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private string GetColor(string skill)
    {
        return skill switch
        {
            // Technologies
            "CSharp" => "#239120",        
            ".Net" => "#512BD4",          
            "HTML" => "#FF0000",          
            "CSS" => "#0000FF",           
            "Bootstrap" => "#7952B3",    
            "JavaScript" => "#F7DF1E",    
            "TypeScript" => "#3178C6",    
            "Node.js" => "#339933",       
            "React" => "#61DAFB",         
            "Python" => "#3776AB",        
            "PHP" => "#777BB4",           
            "Java" => "#007396",          
            "Vue.js" => "#41B883",        
            "Azure" => "#0078D4",         
            "Ruby" => "#CC342D",          
            "Docker" => "#2496ED",
            "SpringBoot" => "#6DB33F",
            "Kubernetes" => "#326CE5",
            "Angular" => "#DD0031",
            "NextJS" => "#000000",
            "Flutter" => "#02569B",
            "Dart" => "#00BFFF",
            "Kotlin" => "#F44336",
            "Figma" => "#F24E1E",
            "VueJS" => "#42b883",
            "TailwindCSS" => "#38b2ac",
            "Astro" => "#FF5C7C",
            "AWS" => "#FF9900",
            
            // Databases
            "MySQL" => "#4479A1",         
            "SQL" => "#CC2927",           
            "PostgresSQL" => "#336791",   
            "MongoDb" => "#47A248",       
            _ => "#9E9E9E", 
        };
    }
    private string GetIcon(string skill)
    {
        return skill switch
        {
            "Terraform" => "simple-icons:terraform",
            "Docker" => "simple-icons:docker",
            "Astro" => "simple-icons:astro",
            "CSharp" => "simple-icons:csharp",
            "React" => "simple-icons:react",
            "Flutter" => "simple-icons:flutter",
            "Dart" => "simple-icons:dart",
            "Kotlin" => "simple-icons:kotlin",
            "Figma" => "simple-icons:figma",
            "TypeScript" => "simple-icons:typescript",
            "Ruby" => "simple-icons:ruby",
            "Java" => "simple-icons:java",
            "SpringBoot" => "simple-icons:spring",
            "Kubernetes" => "simple-icons:kubernetes",
            ".Net" => "simple-icons:.net",
            "JavaScript" => "simple-icons:javascript",
            "PHP" => "simple-icons:php",
            "CSS" => "simple-icons:css3",
            "Angular" => "simple-icons:angular",
            "TailwindCSS" => "simple-icons:tailwindcss",
            "HTML" => "simple-icons:html5",
            "Python" => "simple-icons:python",
            "Azure" => "simple-icons:azure",
            "SQL" => "simple-icons:mysql", 
            "MySQL" => "simple-icons:mysql",
            "MongoDb" => "simple-icons:mongodb",
            "PostgresSQL" => "simple-icons:postgresql",
            _ => "simple-icons:coder"
        };
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }
    

    private async Task FilterCoders()
    {
        coders = await coderService.GetCodersAsync();

        // Filtrar por nombres o apellidos
        if (!string.IsNullOrEmpty(searchText))
        {
            var searchTerms = searchText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            coders = coders.Where(c =>
            {
                var fullName = $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower();
                return searchTerms.All(term => fullName.Contains(term.ToLower()));
            }).ToList();
            FilterApplied = true;
        }

        // Filtro de Skills
        if (!string.IsNullOrEmpty(skills))
        {
            coders = coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(skills, StringComparison.OrdinalIgnoreCase))).ToList();
        }

        // Filtro de Nivel de Lenguaje
        if (!string.IsNullOrEmpty(Language_Level))
        {
            coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(Language_Level, StringComparison.OrdinalIgnoreCase)).ToList();
            FilterApplied = true;
        }

        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);
        LoadCoders(currentPage);
        StateHasChanged();
    }

    private async Task CleanFilters()
    {
        searchText = "";
        skills = "";
        Language_Level = "";

        coders = await coderService.GetCodersAsync();
        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);

        currentPage = 1;
        LoadCoders(currentPage);
        StateHasChanged();
    }

    private async Task CleanFilterSkill(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            skills = "";  // Resetea el valor de skills
            await FilterCoders();  // Aplica los filtros
        }
        
    }

    private async Task CleanFilterEnglishLevel(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            Language_Level = "";  // Resetea el valor de Language_Level
            await FilterCoders();  // Aplica los filtros
        }
    }

    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
            ?.Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("", parameters);
            await modal.Result;
        }
    }
    
    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }
}