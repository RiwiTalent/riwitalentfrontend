@page "/groups"
@using riwitalentfrontend.Components.Utility
@layout MainLayout
@inject SweetAlertService Swal;
@inject IDialogService DialogService
@inject IAlertService alertService;
@inject IGroupService GroupServices
@inject ISnackbar Snackbar

<PageTitle>RiwiTalent: Gestiona y Comparte Grupos de Desarrolladores</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <!-- Muestra alerta si se produce un error -->
    Snackbar.Add(_errorMessage, Severity.Error);
}

<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-column flex-grow-1 justify-center align-content-start">
            @if (_loading)
            {
                <ProgressComponent/>
            }
            else
            {
                <MudContainer Class="ma-3 w-full h-full">
                    <MudText Typo="Typo.h5"><b>@_groups.Count</b> Grupos encontrados</MudText>
                </MudContainer>

                @if (_groups != null && _groups.Any())
                    {
                        <MudContainer Class="ma-3 w-full h-full">
                            <!-- Grid de grupos -->
                            <MudDataGrid
                                    Class="flex-grow-1 pa-5"
                                    LoadingProgressColor="Color.Info"
                                    Hover="true"
                                    Items="@_groups"
                                    MultiSelection="true"
                                    QuickFilter="@QuickFilter">

                    <ToolBarContent>
                        <MudGrid>
                            <MudItem xs="12" Class="d-flex flex-grow-1 gap-3 justify-space-between">
                                <MudTextField Placeholder="Buscar aquí..."
                                              @bind-Value="_searchString"
                                              Immediate="true"
                                              Variant="Variant.Outlined"
                                              Adornment="Adornment.End"
                                              AdornmentIcon="@Icons.Material.Rounded.Search"
                                              AdornmentColor="Color.Primary"/>

                                                <MudSpacer/>
                                                <MudButton OnClick="OpenDialogAsync"
                                                           Color="Color.Primary"
                                                           Variant="Variant.Filled"
                                                           Size="Size.Medium"
                                                           StartIcon="@Icons.Material.Rounded.GroupAdd">Nuevo</MudButton>
                                            </MudItem>
                                        </MudGrid>
                                    </ToolBarContent>

                    <Columns>
                        <SelectColumn T="Models.Group"/>
                        <PropertyColumn Property="x => x.Name" Title="Nombre del grupo">
                            <CellTemplate Context="group">
                                <MudContainer Class="d-flex gap-2 align-center">
                                    <AvatarComponent TypeAvatar="GrupoCoders"
                                                     GroupCoders="GetGroupCoders(group.Item.Name, group.Item.Status)"/>
                                    <MudContainer>
                                        <MudText><b>@group.Item.Name</b></MudText>
                                        <MudText Color="Color.Primary" Typo="Typo.subtitle2">@group.Item.Description</MudText>
                                    </MudContainer>
                                </MudContainer>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Status" Title="Creado por" Sortable="true">
                            <CellTemplate Context="group">
                                <MudStack Row>
                                    <MudText Color="Color.Primary" Typo="Typo.subtitle2">@group.Item.CreatedBy</MudText>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Status" Title="Estado" Sortable="true">
                            <CellTemplate Context="group">
                                <MudStack Row>
                                    <MudChip T="string" Color="@GetChipColor(group.Item.Status)"
                                             Variant="Variant.Filled" Size="Size.Small" Class="px-4">
                                        @group.Item.Status
                                    </MudChip>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Status" Title="Opciones" Sortable="false">
                            <CellTemplate Context="group">
                                <MudStack Row="true">
                                    <MudIconButton Href="@($"/GroupDetails/{group.Item.Id}")"
                                                   Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Outlined.RemoveRedEye"
                                                   Color="Color.Warning" Size="Size.Small"
                                                   Class="border-solid border-2 mud-border-warning pa-2">
                                    </MudIconButton>
                                    <MudIconButton OnClick="@(() => DeleteGroupAsync(group.Item.Id))"
                                                   Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Rounded.DeleteOutline"
                                                   Color="Color.Error" Size="Size.Small"
                                                   Class="border-solid border-2 mud-border-error pa-2">
                                    </MudIconButton>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>

                                <PagerContent>
                                    <MudDataGridPager T="Group"
                                                        PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                                        RowsPerPageString="@_rowsPerPageString"
                                                        InfoFormat="@_infoFormat"/>
                                </PagerContent>
                            
                            </MudDataGrid>
                        </MudContainer>
                    }
                else
                    {
                        <MudText>No hay grupos disponibles.</MudText>
                    }
            }
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {
    private List<Group> _groups = new();
    private string _searchString = string.Empty;
    private bool _loading = true;
    private readonly string _rowsPerPageString = "Filas por página:";
    private readonly string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private string? _errorMessage = null;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadGroupsAsync();
    }

    private async Task LoadGroupsAsync()
    {
        _loading = true;
        _errorMessage = null;

        await ErrorHandling.ExecuteWithErrorHandlingAsync(async () =>
            {
                var groups = await GroupService.GetGroupsAsync() ?? new List<Group>();
                _groups = groups.OrderByDescending(g => g.Created_At).ToList();
            },
            _errorMessage => _errorMessage = this._errorMessage);

        _loading = false;
    }

    private Func<Group, bool> QuickFilter => group =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(group);
    };

    private bool MatchesSearchCriteria(Group group)
    {
        return (group.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (group.Status?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (group.Created_At.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }

    private Color GetChipColor(string? status)
    {
        return status switch
        {
            "Activo" => Color.Success,
            "Inactivo" => Color.Error,
            _ => Color.Default,
        };
    }

    public GroupCoders GetGroupCoders(string name, string status)
    {
        return new GroupCoders
        {
            Name = name,
            IsActive = status == "Activo"
        };
    }

    private async Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters
        {
            ["OnGroupCreated"] = EventCallback.Factory.Create<GroupAddDto>(this, async (GroupAddDto groups) => { await LoadGroupsAsync(); })
        };

        var dialog = await DialogService.ShowAsync<GroupDialogComponent>("Crear Grupo", parameters, options);

        if (!dialog.Result.IsCanceled)
        {
            // Recargar los grupos si es necesario
            await LoadGroupsAsync();
        }
    }
    
  private async Task DeleteGroupAsync(string groupId)
{
    // Mostrar alerta de confirmación
    //var result = await alertService.ConfirmDeleteGroup();
    var result = await Swal.FireAsync(new SweetAlertOptions
    {
        Icon = SweetAlertIcon.Warning,
        Title = "¿Estás seguro/a de que deseas desactivar este grupo?",
        Text = "Esta acción no se podrá deshacer.",
        ShowCancelButton = true,
        ConfirmButtonColor = "#FE654F",
        ConfirmButtonText = "Eliminar",
        CancelButtonColor = "#fff",
        CancelButtonText = "<button style='color:#FE654F; background-color:#fff'>Cancelar</button>"
    });

    // Si el usuario confirma, proceder con la eliminación
    if (result.IsConfirmed)
    {
        await ErrorHandling.ExecuteWithErrorHandlingAsync(async () =>
            {
                var success = await GroupService.DeleteGroupAsync(groupId); // Usamos el servicio
                if (success)
                {
                    await LoadGroupsAsync(); // Recargar los grupos después de desactivar
                }
                else
                {
                    _errorMessage = "No se pudo desactivar el grupo.";
                }
            },
            errorMessage => _errorMessage = errorMessage);
    }
    else
    {
        // El usuario canceló la eliminación
        Console.WriteLine("Eliminación de grupo cancelada");
    }
}



}
