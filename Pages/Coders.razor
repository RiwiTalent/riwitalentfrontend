@page "/coders"
@layout MainLayout

@* @attribute [Authorize] *@
@inject ICoderService CoderService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>RiwiTalent: Explora el Mejor Talento de Desarrolladores</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <!-- Muestra alerta si se produce un error -->
    Snackbar.Add(_errorMessage, Severity.Error);
}
<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-column flex-grow-1 justify-center align-content-start">
            @if (_loading)
            {
                <ProgressComponent/>
            }
            else
            {
                <MudContainer Class="ma-3 w-full h-full">
                    <MudText Typo="Typo.h5"><b>@_coders.Count</b> Coders encontrados</MudText>
                </MudContainer>
                
                <MudDrawer @bind-Open="_drawerOpen" Anchor="Anchor.Right" Overlay="true" OverlayAutoClose="true" Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Never" Elevation="1" Class="rounded ma-2">
                    <!-- Filtro por skills -->
                    <CoderFilterComponent OnFiltered="UpdateCoders" />
                </MudDrawer>

                @if (_coders != null && _coders.Any())
                    {
                        <MudContainer Class="ma-3 w-full h-full">
                            <!-- Grid de coders -->
                            <MudDataGrid T="Coder"
                                         Class="flex-grow-1 pa-5"
                                         LoadingProgressColor="Color.Info"
                                         Hover="true"
                                         Items="@_coders"
                                         MultiSelection="true"
                                         QuickFilter="@QuickFilter">

                                <ToolBarContent>
                                    <MudGrid>
                                        <MudItem xs="12" Class="d-flex flex-grow-1 gap-3 justify-space-between">
                                            <MudTextField Placeholder="Buscar aquí..." @bind-Value="_searchString" Immediate="true" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Search" AdornmentColor="Color.Primary"></MudTextField>
                                            <MudSpacer/>
                                            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" OnClick="DrawerToggle" StartIcon="@Icons.Material.Rounded.Tune">Filtro por tecnologias</MudButton>
                                            <MudButton @onclick="OpenDialogAsync" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.PersonAdd">Nuevo</MudButton>
                                        </MudItem>
                                    </MudGrid>
                                </ToolBarContent>

                                <Columns>
                                    <SelectColumn T="Coder"/>
                                    <!--  <PropertyColumn  Style="width: 100px" Property="x => _coders.IndexOf(x) + 1" Title="Numero" Filterable="false"/> -->
                                    <PropertyColumn Property="x => x.FirstName" Title="Nombre">
                                        <CellTemplate Context="coder">
                                            <MudContainer Class="d-flex gap-1">
                                                <MudAvatar>
                                                    <MudImage Src="@coder.Item.Photo"></MudImage>
                                                </MudAvatar>
                                                <MudContainer>
                                                    <MudText><b>@coder.Item.FirstName @coder.Item.SecondName</b></MudText>
                                                    <MudText Color="Color.Primary" Typo="Typo.subtitle2">@coder.Item.Stack</MudText>
                                                </MudContainer>
                                            </MudContainer>
                                        </CellTemplate>
                                    </PropertyColumn>
                                    <PropertyColumn Property="x => x.CreatedAt" Title="Fecha de creación"/>
                                    <PropertyColumn Property="x => x.Status" Title="Estado" Sortable="true">
                                        <CellTemplate Context="coder">
                                            <MudStack Row>
                                                <MudChip T="string" Color="@GetChipColor((string)coder.Item.Status)"
                                                         Variant="Variant.Filled" Size="Size.Small" Class="px-4">
                                                    @coder.Item.Status
                                                </MudChip>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>

                                    <PropertyColumn Property="x => x.Status" Title="Opciones" Sortable="false">
                                        <CellTemplate Context="coder">
                                            <MudStack Row>
                                                <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                               Icon="@Icons.Material.Rounded.ModeEditOutline"
                                                               Color="Color.Primary" Size="Size.Small"
                                                               Class="border-solid border-2 mud-border-primary pa-2">
                                                </MudIconButton>
                                                <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                               Icon="@Icons.Material.Outlined.RemoveRedEye"
                                                               Color="Color.Warning" Size="Size.Small"
                                                               Class="border-solid border-2 mud-border-warning pa-2">
                                                </MudIconButton>
                                                <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                               Icon="@Icons.Material.Rounded.DeleteOutline"
                                                               Color="Color.Error" Size="Size.Small"
                                                               Class="border-solid border-2 mud-border-error pa-2">
                                                </MudIconButton>
                                            </MudStack>
                                        </CellTemplate>
                                    </PropertyColumn>
                                </Columns>

                                <PagerContent>
                                    <MudDataGridPager T="Coder"
                                                      PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                                      RowsPerPageString="@_rowsPerPageString"
                                                      InfoFormat="@_infoFormat"/>
                                </PagerContent>
                            </MudDataGrid>
                        </MudContainer>
                    }
                else
                    {
                        <MudText>No hay coders disponibles.</MudText>
                    }
            }
        </MudContainer>

    </Authorized>
</AuthorizeView>

@code {
    private List<Coder> _coders;
    private string? _searchString;
    private bool _loading = true;
    private int CoderCount => _coders?.Count ?? 0;
    private string _errorMessage;
    private string _rowsPerPageString = "Filas por página:";
    private string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private List<string> _selectedSkills = new List<string>();
    private HashSet<string> _skillsSet = new HashSet<string>();
    private bool _drawerOpen = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCodersAsync();
    }
    
    private async Task LoadCodersAsync()
    {
        _loading = true;
        _errorMessage = string.Empty; // Limpiar el mensaje de error previo
    
        try
        {
            // Intentar obtener los coders
            _coders = await CoderService.GetCodersAsync();

            // Asegura que no haya coder nulos
            _coders = _coders?.Where(c => c != null).ToList() ?? new List<Coder>();
        }
        catch (HttpRequestException httpEx) // Manejo específico de errores de red
        {
            _errorMessage = "Hubo un problema con la conexión a internet. Intente nuevamente más tarde.";
            LogError(httpEx); // Método para loguear el error
        }
        catch (NullReferenceException nullEx) // Manejo de errores de referencia nula
        {
            _errorMessage = "Ocurrió un error inesperado. Intente más tarde.";
            LogError(nullEx);
        }
        catch (Exception ex) // Catch general para cualquier otra excepción
        {
            _errorMessage = "Hubo un error al cargar los coder. Intente nuevamente más tarde.";
            LogError(ex); // Loguear cualquier otro tipo de error
        }
        finally
        {
            _loading = false;
        }
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    
    // Método para loguear errores
    private void LogError(Exception ex)
    {
        Console.WriteLine($"Error al obtener grupos: {ex.Message}");
    }
    
    private void UpdateCoders(List<Coder> filteredCoders)
    {
        _coders = filteredCoders;
    }
    
    // Metodo para abrir dialogo
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        return DialogService.ShowAsync<DialogComponent>("Creación de grupo", options);
    }
    
    // Filtro de busqueda
    private Func<Coder, bool> QuickFilter => coder =>
    {

        if (string.IsNullOrWhiteSpace(_searchString) && !_selectedSkills.Any())
            return true;

        return MatchesSearchCriteria(coder);
    };


    private bool MatchesSearchCriteria(Coder coder)
    {
        return (coder.FirstName != null && coder.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondName != null && coder.SecondName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondLastName != null && coder.SecondLastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.Status != null && coder.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.CreatedAt != null && coder.CreatedAt.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }



    // Condicional para colores de los Chip de Status
    private Color GetChipColor(string? status)
    {
        return status switch
        {
            "Active" => Color.Success,
            "Inactive" => Color.Default,
            "Grouped" => Color.Error,
            "Selected" => Color.Info,
            _ => Color.Default,
        };
    }
}