@page "/coders"
@layout MainLayout

@attribute [Authorize]
@inject ICoderService CoderService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>RiwiTalent: Explora el Mejor Talento de Desarrolladores</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <!-- Muestra alerta si se produce un error -->
    Snackbar.Add(_errorMessage, Severity.Error);
}

<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-column flex-grow-1 justify-center align-content-start">
            @if (_loading)
            {
                <ProgressComponent />
            }
            else
            {
                <MudContainer Class="ma-3 w-full h-full">
                    <MudText Typo="Typo.h5"><b>@_coders.Count</b> Coders encontrados</MudText>
                </MudContainer>

                <!-- Drawer para filtro -->
                <MudDrawer @bind-Open="_drawerOpen" 
                           Anchor="Anchor.Right" 
                           Overlay="true" 
                           OverlayAutoClose="true" 
                           Variant="DrawerVariant.Temporary" 
                           ClipMode="DrawerClipMode.Never" 
                           Elevation="1" 
                           Class="rounded ma-2">
                    <CoderFilterComponent OnFiltered="UpdateCoders" />
                </MudDrawer>

                @if (_coders != null && _coders.Any())
                {
                    <MudContainer Class="ma-3 w-full h-full">
                        <!-- Grid de coders -->
                        <MudDataGrid T="Coder"
                                     Class="flex-grow-1 pa-5"
                                     LoadingProgressColor="Color.Info"
                                     Hover="true"
                                     Items="@_coders"
                                     QuickFilter="@QuickFilter">

                            <!-- Contenido de la barra de herramientas -->
                            <ToolBarContent>
                                <MudGrid>
                                    <MudItem xs="12" md="6" Class="d-flex">
                                        <MudTextField Placeholder="Buscar aquí..."
                                                      @bind-Value="_searchString"
                                                      Immediate="true"
                                                      Variant="Variant.Outlined"
                                                      Adornment="Adornment.End"
                                                      AdornmentIcon="@Icons.Material.Rounded.Search"
                                                      AdornmentColor="Color.Primary">
                                        </MudTextField>
                                    </MudItem>

                                    <!-- Espaciador -->
                                    <MudSpacer />

                                    <MudItem xs="12" md="6" Class="d-flex justify-end gap-2">
                                        <MudButton Color="Color.Primary" 
                                                   Variant="Variant.Outlined" 
                                                   Size="Size.Medium" 
                                                   OnClick="DrawerToggle" 
                                                   StartIcon="@Icons.Material.Rounded.Tune">
                                            Filtro por tecnologías
                                        </MudButton>
                                        <MudButton @onclick="OpenDialogAsync" 
                                                   Color="Color.Primary" 
                                                   Variant="Variant.Filled" 
                                                   Size="Size.Medium" 
                                                   StartIcon="@Icons.Material.Rounded.PersonAdd">
                                            Crear coder
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </ToolBarContent>

                            <!-- Columnas de datos -->
                            <Columns>
                                <PropertyColumn Property="x => x.FirstName" Title="Nombre">
                                    <CellTemplate Context="coder">
                                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                            <MudAvatar>
                                                <MudImage Src="@coder.Item.Photo"></MudImage>
                                            </MudAvatar>
                                            <MudContainer>
                                                <MudText><b>@coder.Item.FirstName @coder.Item.SecondName</b></MudText>
                                                <MudText Color="Color.Primary" Typo="Typo.subtitle2">@coder.Item.Stack</MudText>
                                            </MudContainer>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.AssessmentScore" Title="Puntaje">
                                    <CellTemplate Context="coder">
                                        <MudStack Row="true">
                                            <MudText Align="Align.Justify" Typo="Typo.h6" Color="Color.Primary">
                                                <b>@coder.Item.AssessmentScore</b> pts.
                                            </MudText>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.Status" Title="Estado" Sortable="true">
                                    <CellTemplate Context="coder">
                                        <MudStack Row="true">
                                            <MudChip T="string" Color="@GetChipColor((string)coder.Item.Status)"
                                                     Variant="Variant.Filled" Size="Size.Small" Class="px-4">
                                                @coder.Item.Status
                                            </MudChip>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.Status" Title="Opciones" Sortable="false">
                                    <CellTemplate Context="coder">
                                        <MudStack Row="true">
                                            <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                           Icon="@Icons.Material.Rounded.ModeEditOutline"
                                                           Color="Color.Primary" Size="Size.Small"
                                                           Class="border-solid border-2 mud-border-primary pa-2">
                                            </MudIconButton>
                                            <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                           Icon="@Icons.Material.Outlined.RemoveRedEye"
                                                           Color="Color.Warning" Size="Size.Small"
                                                           Class="border-solid border-2 mud-border-warning pa-2">
                                            </MudIconButton>
                                            <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                           Icon="@Icons.Material.Rounded.DeleteOutline"
                                                           Color="Color.Error" Size="Size.Small"
                                                           Class="border-solid border-2 mud-border-error pa-2">
                                            </MudIconButton>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>

                            <!-- Contenido del paginador -->
                            <PagerContent>
                                <MudDataGridPager T="Coder"
                                                  PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                                  RowsPerPageString="@_rowsPerPageString"
                                                  InfoFormat="@_infoFormat" />
                            </PagerContent>
                        </MudDataGrid>
                    </MudContainer>
                }
                else
                {
                    <MudText>No hay coders disponibles.</MudText>
                }
            }
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {
    // Variables privadas para el manejo de los coders
    private List<Coder> _coders;
    private string? _searchString;
    private bool _loading = true;
    private string _errorMessage;
    private string _rowsPerPageString = "Filas por página:";
    private string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private bool _drawerOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCodersAsync();
    }

// Método para cargar los coders
    private async Task LoadCodersAsync()
    {
        _loading = true;
        _errorMessage = string.Empty; // Limpiar el mensaje de error al comenzar

        try
        {
            // Intentar obtener los coders
            var coders = await CoderService.GetCodersAsync();
        
            // Asegurar que no haya coders nulos y ordenar
            _coders = (coders ?? new List<Coder>())
                .Where(c => c != null)
                .OrderByDescending(c => c.Status == "Activo")
                .ThenByDescending(c => c.Date_Creation)
                .ToList();
        }
        catch (HttpRequestException httpEx)
        {
            _errorMessage = "Hubo un problema con la conexión a internet. Intente nuevamente más tarde.";
            LogError(httpEx);
        }
        catch (Exception ex)
        {
            _errorMessage = "Hubo un error al cargar los coders. Intente nuevamente más tarde.";
            LogError(ex);
        }
        finally
        {
            _loading = false;
        }
    }


    // Alternar estado del drawer
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // Método para loguear errores
    private void LogError(Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }

    // Actualiza la lista de coders filtrados
    private void UpdateCoders(List<Coder> filteredCoders)
    {
        _coders = filteredCoders;
    }

    // Método para abrir el diálogo
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        return DialogService.ShowAsync<GroupDialogComponent>("Creación de grupo", options);
    }

    // Filtro de búsqueda
    private Func<Coder, bool> QuickFilter => coder =>
    {
        // Devuelve verdadero si no hay criterios de búsqueda
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(coder);
    };

    // Verifica si el coder coincide con los criterios de búsqueda
    private bool MatchesSearchCriteria(Coder coder)
    {
        return (coder.FirstName != null && coder.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondName != null && coder.SecondName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondLastName != null && coder.SecondLastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.Status != null && coder.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.DateCreation != null && coder.DateCreation.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }

    // Devuelve el color del chip según el estado
    private Color GetChipColor(string? status)
    {
        return status switch
        {
            "Activo" => Color.Success,
            "Inactivo" => Color.Default,
            "Agrupado" => Color.Success,
            "Seleccionado" => Color.Info,
            _ => Color.Default,
        };
    }
}
