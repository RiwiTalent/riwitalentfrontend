@page "/coders"
@layout MainLayout

@* @attribute [Authorize] *@
@inject ICoderService CoderService
@inject IDialogService DialogService

<PageTitle>RiwiTalent: Explora el Mejor Talento de Desarrolladores</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <!-- Muestra alerta si se produce un error -->
    <MudAlert Severity="Severity.Warning">@_errorMessage</MudAlert>
}
<AuthorizeView>
    <Authorized>
        @if (_loading)
        {
            <ProgressComponent Indeterminate="true" Color="Color.Info" Class="my-7" />
        }
        else
        {
            <!-- Total coders -->
            <MudContainer Class="ma-3 w-full h-full">
                <MudText Typo="Typo.h5"><b>@CoderCount</b> Coders encontrados</MudText>
            </MudContainer>
            <MudContainer Class="ma-3 w-full h-full">
                
                
                
                
                <MudChipSet @bind-SelectedValues="_selectedSkills" SelectionMode="SelectionMode.MultiSelection" CheckMark="true" Variant="Variant.Text" Color="Color.Default"  SelectedColor="Color.Primary">
                    @foreach (var skill in _skillsList)
                    {
                        <MudChip T="string" Value="skill">@skill</MudChip>
                    }

                </MudChipSet>
                <div class="d-flex flex-column align-center">
                    @if (_selectedSkills.Any())
                    {
                        <MudText>Tecnologias @string.Join(", ", _selectedSkills.OrderBy(x => x))</MudText>
                    }
                    else
                    {
                        <MudText>Ninguna tecnología seleccionada.</MudText>
                    }
                </div>

                <!-- Grid de coders -->
                <MudDataGrid T="Coder"
                             Class="flex-grow-1 pa-2 rounded-lg"
                             LoadingProgressColor="Color.Info"
                             Hover="true"
                             Items="@_coders"
                             MultiSelection="true"
                             QuickFilter="@QuickFilter">
                    <ToolBarContent>
                        <MudGrid>
                            <MudItem xs="12" Class="d-flex flex-grow-1 gap-3 justify-space-between">
                                <MudTextField Placeholder="Buscar aquí..." @bind-Value="_searchString" Immediate="true" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Rounded.Search" AdornmentColor="Color.Primary"></MudTextField>
                                <MudSpacer />
                                <MudButton Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.Tune">Filtros</MudButton>
                                <MudButton @onclick="OpenDialogAsync" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" StartIcon="@Icons.Material.Rounded.PersonAdd">Nuevo</MudButton>
                            </MudItem>
                        </MudGrid>
                    </ToolBarContent>

                    <Columns>
                        <SelectColumn T="Coder"/>
                        <!--  <PropertyColumn  Style="width: 100px" Property="x => _coders.IndexOf(x) + 1" Title="Numero" Filterable="false"/> -->
                        <PropertyColumn Property="x => x.FirstName" Title="Nombre">
                            <CellTemplate Context="coder">
                                <MudContainer Class="d-flex gap-1">
                                    <MudAvatar>
                                        <MudImage Src="@coder.Item.Photo"></MudImage>
                                    </MudAvatar>
                                    <MudContainer>
                                        <MudText><b>@coder.Item.FirstName @coder.Item.SecondName</b></MudText>
                                        <MudText Color="Color.Primary" Typo="Typo.subtitle2">@coder.Item.Stack</MudText>
                                    </MudContainer>
                                </MudContainer>
                            </CellTemplate>
                        </PropertyColumn> <!-- Eliminar el "/>" extra aquí -->
                        <PropertyColumn Property="x => x.CreatedAt" Title="Fecha de creación"/>
                        <PropertyColumn Property="x => x.Status" Title="Estado" Sortable="true">
                            <CellTemplate Context="coder">
                                <MudStack Row>
                                    <MudChip T="string" Color="@GetChipColor((string)coder.Item.Status)"
                                             Variant="Variant.Filled" Size="Size.Small" Class="px-4">
                                        @coder.Item.Status
                                    </MudChip>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>

                        <PropertyColumn Property="x => x.Status" Title="Opciones" Sortable="false">
                            <CellTemplate Context="coder">
                                <MudStack Row>
                                    <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Rounded.ModeEditOutline"
                                                   Color="Color.Primary" Size="Size.Small"
                                                   Class="border-solid border-2 mud-border-primary pa-2">
                                    </MudIconButton>
                                    <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Outlined.RemoveRedEye"
                                                   Color="Color.Warning" Size="Size.Small"
                                                   Class="border-solid border-2 mud-border-warning pa-2">
                                    </MudIconButton>
                                    <MudIconButton Href="/Home" Variant="Variant.Outlined"
                                                   Icon="@Icons.Material.Rounded.DeleteOutline"
                                                   Color="Color.Error" Size="Size.Small"
                                                   Class="border-solid border-2 mud-border-error pa-2">
                                    </MudIconButton>
                                </MudStack>
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="Coder"
                                          PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                          RowsPerPageString="@_rowsPerPageString"
                                          InfoFormat="@_infoFormat"/>
                    </PagerContent>
                </MudDataGrid>
            </MudContainer>
        }
    </Authorized>
</AuthorizeView>

@code {
    private List<Coder> _coders; 
    private string? _searchString;
    private bool _sortNameByLength;
    private bool _loading = true;
    private int CoderCount => _coders?.Count ?? 0;
    private string _errorMessage;
    private string _rowsPerPageString = "Filas por página:";
    private string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private IReadOnlyCollection<string> _selectedSkills = new HashSet<string>();
    private IReadOnlyCollection<string> _skillsList = new HashSet<string>();

    
    protected override async Task OnInitializedAsync()
    {
        await LoadCodersAsync();
    }
    
    private async Task LoadCodersAsync()
    {
        _loading = true;
        _errorMessage = string.Empty; // Limpiar el mensaje de error previo
    
        try
        {
            // Intentar obtener los coders
            _coders = await CoderService.GetCodersAsync();

            // Asegurarse de que no haya coder nulos
            _coders = _coders?.Where(c => c != null).ToList() ?? new List<Coder>();

            Console.WriteLine($"Total coder obtenidos: {_coders.Count}");
            
            // Busca las Skill de los coders
            _skillsList = SearchSkills();

        }
        catch (HttpRequestException httpEx) // Manejo específico de errores de red
        {
            _errorMessage = "Hubo un problema con la conexión a internet. Intente nuevamente más tarde.";
            LogError(httpEx); // Método para loguear el error
        }
        catch (NullReferenceException nullEx) // Manejo de errores de referencia nula
        {
            _errorMessage = "Ocurrió un error inesperado. Intente más tarde.";
            LogError(nullEx);
        }
        catch (Exception ex) // Catch general para cualquier otra excepción
        {
            _errorMessage = "Hubo un error al cargar los coder. Intente nuevamente más tarde.";
            LogError(ex); // Loguear cualquier otro tipo de error
        }
        finally
        {
            _loading = false;
        }
    }
    
    // Método para loguear errores
    private void LogError(Exception ex)
    {
        Console.WriteLine($"Error al obtener grupos: {ex.Message}");
    }
    
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<DialogComponent>("Creación de grupo", options);
    }
    
    private HashSet<string> SearchSkills()
    {
        var skillsList = new HashSet<string>();

        foreach (var coder in _coders)
        {
            if (coder.Skills != null)
            {
                foreach (var skill in coder.Skills)
                {
                    if (!string.IsNullOrEmpty(skill.Language_Programming))
                    {
                        skillsList.Add(skill.Language_Programming);
                    }
                }
            }
        }
        return skillsList;
    }

    
    // Filtro de busqueda
    private Func<Coder, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(x);
    };

    private bool MatchesSearchCriteria(Coder coder)
    {
        return (coder.FirstName != null && coder.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondName != null && coder.SecondName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondLastName != null && coder.SecondLastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.Email != null && coder.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.Status != null && coder.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.CreatedAt != null && coder.CreatedAt.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }

    // Condicional para colores de los Chip de Status
    private Color GetChipColor(string? status)
    {
        return status switch
        {
            "Active" => Color.Success,
            "Inactive" => Color.Default,
            "Grouped" => Color.Error,
            "Selected" => Color.Info,
            _ => Color.Default,
        };
    }
}
