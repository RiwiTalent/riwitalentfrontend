@page "/coders"
@layout MainLayout

@attribute [Authorize]
@inject ICoderService CoderService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal;


<PageTitle>RiwiTalent: Explora el Mejor Talento de Desarrolladores</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <!-- Muestra alerta si se produce un error -->
    Snackbar.Add(_errorMessage, Severity.Error);
}

<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-column flex-grow-1 justify-center align-content-start">
            @if (_loading)
            {
                <ProgressComponent />
            }
            else
            {
                <!-- Drawer para filtro -->
                <MudDrawer @bind-Open="_drawerOpen" 
                           Anchor="Anchor.Right" 
                           Overlay="true" 
                           OverlayAutoClose="true" 
                           Variant="DrawerVariant.Temporary" 
                           ClipMode="DrawerClipMode.Never" 
                           Elevation="1" 
                           Class="rounded ma-2">
                    <CoderFilterComponent OnFiltered="UpdateCoders" />
                </MudDrawer>

                @if (_coders != null && _coders.Any())
                {
                    <MudContainer Class="ma-3 d-flex flex-grow-1 justify-center align-content-start">
                        <!-- Resultados encontrados -->
                        <MudContainer Class="d-flex align-end px-0 justify-star gap-2">
                            <MudText Color="Color.Primary" Typo="Typo.h5"><b>@_coders.Count</b></MudText>
                            <MudText Typo="Typo.h5"><b>Resultados encontrados</b></MudText>
                        </MudContainer>

                        <!-- Botón Agregar -->
                        <MudContainer Class="d-flex flex-grow-1 px-0 justify-end align-content-start">
                            <MudTooltip Text="Crear coder">
                                <MudFab Color="Color.Primary"
                                        @onclick="OpenDialogAsync"
                                        Size="Size.Medium"
                                        StartIcon="@Icons.Material.Rounded.PersonAdd">
                                    Crear coder
                                </MudFab>
                            </MudTooltip>
                        </MudContainer>
                    </MudContainer>
                    
                    
                    <MudContainer Class="ma-3 w-full h-full">
                        <!-- Grid de coders -->
                        <MudDataGrid T="Coder"
                                     Class="flex-grow-1 pa-5"
                                     LoadingProgressColor="Color.Info"
                                     Hover="true"
                                     Items="@_coders"
                                     QuickFilter="@QuickFilter">

                            <!-- Contenido de la barra de herramientas -->
                            <ToolBarContent>
                                <MudGrid>
                                    <MudItem xs="6" sm="6" Class="d-flex gap-2">
                                        <MudTextField Placeholder="Buscar aquí..."
                                                      @bind-Value="_searchString"
                                                      Immediate="true"
                                                      FullWidth="true"
                                                      Variant="Variant.Outlined"
                                                      Adornment="Adornment.End"
                                                      AdornmentIcon="@Icons.Material.Rounded.Search"
                                                      AdornmentColor="Color.Primary"
                                                      Margin="Margin.Dense">
                                        </MudTextField>
                                    </MudItem>
                                    <MudItem xs="6" sm="6" Class="d-flex gap-2 justify-end">
                                        <MudButton Color="Color.Primary"
                                                   Variant="Variant.Outlined"
                                                   OnClick="DrawerToggle"
                                                   Size="Size.Small"
                                                   StartIcon="@Icons.Material.Rounded.Tune">
                                            Tecnologías
                                        </MudButton>
                                    </MudItem>
                                </MudGrid>
                            </ToolBarContent>

                            <!-- Columnas de datos -->
                            <Columns>
                                <PropertyColumn Property="x => x.FirstName" Title="Nombre">
                                    <CellTemplate Context="coder">
                                        <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">



                                            <AvatarComponent
                                                AvatarUrl="@coder.Item.Photo"
                                                FirstName="@coder.Item.FirstName"
                                                LastName="@coder.Item.FirstLastName"
                                                TypeAvatar="Coder" />
                                            
                                            <MudContainer>
                                                <MudText ><b>@coder.Item.FirstName @coder.Item.SecondName</b></MudText>
                                                <MudText Color="Color.Primary" Typo="Typo.subtitle2">@coder.Item.Stack</MudText>
                                            </MudContainer>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                                <PropertyColumn Property="x => x.AssessmentScore" Title="Puntaje">
                                    <CellTemplate Context="coder">
                                        <MudText Align="Align.Justify" Typo="Typo.h6" Color="Color.Primary">
                                            <b>@coder.Item.AssessmentScore pts.</b>
                                        </MudText>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.Status" Title="Estado" Sortable="true">
                                    <CellTemplate Context="coder">
                                        <StatusChipComponent Status="@coder.Item.Status"/>
                                    </CellTemplate>
                                </PropertyColumn>

                                <PropertyColumn Property="x => x.Status" Title="Opciones" Sortable="false">
                                    <CellTemplate Context="coder">
                                        <MudStack Row="true">
                                            <MudIconButton Href="@($"/CoderDetails/{coder.Item.Id}")"
                                                           Variant="Variant.Outlined"
                                                           Icon="@Icons.Material.Outlined.RemoveRedEye"
                                                           Color="Color.Warning" Size="Size.Small"
                                                           Class="border-solid border-2 mud-border-warning pa-2">
                                            </MudIconButton>
                                            <MudIconButton OnClick="@(() => DeleteCoderAsync(coder.Item.Id))" Variant="Variant.Outlined"
                                                           Icon="@Icons.Material.Rounded.DeleteOutline"
                                                           Color="Color.Error" Size="Size.Small"
                                                           Class="border-solid border-2 mud-border-error pa-2">
                                            </MudIconButton>
                                        </MudStack>
                                    </CellTemplate>
                                </PropertyColumn>
                            </Columns>

                            <!-- Contenido del paginador -->
                            <PagerContent>
                                <MudDataGridPager T="Coder"
                                                  PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                                  RowsPerPageString="@_rowsPerPageString"
                                                  InfoFormat="@_infoFormat"/>
                            </PagerContent>
                        </MudDataGrid>
                    </MudContainer>
                }
                else
                {
                    <MudText>No hay coders disponibles.</MudText>
                }
            }
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {
    // Variables privadas para el manejo de los coders
    private List<Coder> _coders;
    private string? _searchString;
    private bool _loading = true;
    private string _errorMessage;
    private string _rowsPerPageString = "Filas por página:";
    private string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private bool _drawerOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCodersAsync();
    }

// Método para cargar los coders
    private async Task LoadCodersAsync()
    {
        _loading = true;
        _errorMessage = string.Empty; // Limpiar el mensaje de error al comenzar

        try
        {
            // Intentar obtener los coders
            var coders = await CoderService.GetCodersAsync();
        
            // Asegurar que no haya coders nulos y ordenar
            _coders = (coders ?? new List<Coder>())
                .Where(c => c != null)
                .OrderByDescending(c => c.Status == "Activo")
                .ThenByDescending(c => c.Date_Creation)
                .ToList();
        }
        catch (HttpRequestException httpEx)
        {
            _errorMessage = "Hubo un problema con la conexión a internet. Intente nuevamente más tarde.";
            LogError(httpEx);
        }
        catch (Exception ex)
        {
            _errorMessage = "Hubo un error al cargar los coders. Intente nuevamente más tarde.";
            LogError(ex);
        }
        finally
        {
            _loading = false;
        }
    }


    // Alternar estado del drawer
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // Método para loguear errores
    private void LogError(Exception ex)
    {
        Console.WriteLine($"Error: {ex.Message}");
    }

    // Actualiza la lista de coders filtrados
    private void UpdateCoders(List<Coder> filteredCoders)
    {
        _coders = filteredCoders;
    }

    // Método para abrir el diálogo
    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        return DialogService.ShowAsync<CoderDialogComponent>("Crear de Coder", options);
    }

    // Filtro de búsqueda
    private Func<Coder, bool> QuickFilter => coder =>
    {
        // Devuelve verdadero si no hay criterios de búsqueda
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(coder);
    };

    // Verifica si el coder coincide con los criterios de búsqueda
    private bool MatchesSearchCriteria(Coder coder)
    {
        return (coder.FirstName != null && coder.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondName != null && coder.SecondName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.SecondLastName != null && coder.SecondLastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.Status != null && coder.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (coder.DateCreation != null && coder.DateCreation.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }

    private async Task DeleteCoderAsync(string Id)
    {
        // Llamar al servicio para obtener el coder y verificar su estado
        var coder = await CoderService.GetCoderByIdAsync(Id); // Obtiene el objeto Coder

        // Verificar si se pudo obtener el coder
        if (coder == null)
        {
            // Mostrar mensaje de que no se encontró el coder
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No se pudo encontrar el coder",
                Text = "El coder no existe o ocurrió un error.",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "Aceptar"
            });
            return; 
        }

        // Verificar si el estado del coder es "Inactivo" o "Agrupado" o "selected".
        if (coder.Status == "Inactivo" || coder.Status == "Agrupado" || coder.Status == "Seleccionado")
        {
            // Mostrar mensaje de que no se puede desactivar el coder debido a su estado
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "No se puede desactivar el coder",
                Text = $"El coder tiene el estado '{coder.Status}' y no se puede desactivar.",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonText = "Aceptar"
            });
            return;
        }

        // Mostrar alerta de confirmación
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Icon = SweetAlertIcon.Warning,
            Title = "¿Estás seguro/a de que deseas desactivar este coder?",
            Text = "Esta acción no se podrá deshacer.",
            ShowCancelButton = true,
            ConfirmButtonColor = "#FE654F",
            ConfirmButtonText = "Eliminar",
            CancelButtonColor = "#fff",
            CancelButtonText = "<button style='color:#FE654F; background-color:#fff'>Cancelar</button>"
        });

        // Si el usuario confirma, proceder con la eliminación
        if (result.IsConfirmed)
        {
            await ErrorHandling.ExecuteWithErrorHandlingAsync(async () =>
            {
                var success = await CoderService.DeleteCodersAsync(Id); // Eliminar el coder
                if (success == true)
                {
                    await LoadCodersAsync(); // Recargar los coders después de desactivar
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "El codificador ha sido desactivado exitosamente",
                        Icon = SweetAlertIcon.Success,
                        ShowConfirmButton = false,
                        Timer = 1500
                    });
                }
                else
                {
                    _errorMessage = "No se pudo desactivar el coder.";
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = _errorMessage,
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Aceptar"
                    });
                }
            },
            errorMessage => _errorMessage = errorMessage);
        }
        else
        {
            // El usuario canceló la eliminación
            Console.WriteLine("Eliminación cancelada");
        }
    }




}