@page "/CoderSelected/{groupId}"
@using riwitalentfrontend.Components.GroupCoder

@inject ICoderService coderService
@inject IEmailService emailService

@layout MainLayout
@inject IGroupService GroupService
@inject SweetAlertService Swal;
@inject AlertService AlertService;
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>RiwiTalent: Elige el mejor talento Riwi</PageTitle>

@attribute [Authorize]


<PageTitle>RiwiTalent: Detalles del Grupo</PageTitle>

@if (!string.IsNullOrEmpty(_errorMessage))
{
<!-- Muestra alerta si se produce un error -->
    <MudAlert Severity="Severity.Error">@_errorMessage</MudAlert>
}



<AuthorizeView>
    <Authorized>
        @if (_loading)
        {
        <ProgressComponent />
        }
        else
        {
        <!-- Drawer para filtro -->
        <MudDrawer @bind-Open="_drawerOpen" Anchor="Anchor.Right" Overlay="true" OverlayAutoClose="true"
                   Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Never" Elevation="1" Class="rounded ma-2">
            <CoderFilterComponent OnFiltered="UpdateCoders" />
        </MudDrawer>

        <MudContainer Class="ma-3 d-flex flex-column flex-grow-1 justify-center align-content-start">
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-4 py-3 px-0">
                
                <!-- Botón Regresar -->
                <MudTooltip Text="Regresar">
                    <MudIconButton Href="@($"/GroupDetails/{groupId}")" Variant="Variant.Outlined"
                                   Icon="@Icons.Material.Rounded.ArrowBackIos" Color="Color.Primary" Size="Size.Small"
                                   Class="border-solid border-2 mud-border-primary pa-2">
                    </MudIconButton>
                </MudTooltip>
            </MudContainer>

            <MudGrid Justify="Justify.Center" Spacing="3">
                <!-- Cards de grupos -->
                <MudItem xs="12" sm="4" md="4">
                    <CardComponent SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" groupId="@groupId" FilterInGroup = "@FilterInGroup"/>
                </MudItem>

                <!-- Total coders en el grupo -->
                <ListCodersGroupComponent GroupId="@groupId" />
            </MudGrid>
        </MudContainer>
        }
    </Authorized>
</AuthorizeView>


@code {
    private IBrowserFile _files;
    private Group _group;
    private List<Coder> _coders;
    private string _searchString;
    private bool _loading = true;
    private string _errorMessage;
    private string _rowsPerPageString = "Filas por página:";
    private string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private bool isEditing = false;
    private bool _drawerOpen = false;
    
    [Parameter]
    public bool ButtonText { get; set; } = true;

    [Parameter]
    public string? groupId { get; set; }

    [Parameter]
    public bool? FilterInGroup { get; set; } = true;

    private List<Coder> _selectedCoders = new List<Coder>();

    private void AddCoderHandler(Coder coder)
    {
        Console.WriteLine($"Coder agregado: {coder.FirstName} {coder.FirstLastName}");
       
    }
    
    private async Task AddCodersToGroupAsync()
    {
        if (string.IsNullOrEmpty(groupId) || _selectedCoders.Count == 0)
        {
            Console.WriteLine("Debes ingresar un ID de grupo y seleccionar coders.");
            return;
        }

        var coderIds = _selectedCoders.Select(c => c.Id).ToList();
        Console.WriteLine($"Enviando {coderIds.Count} coders al grupo {groupId}: {string.Join(", ", coderIds)}");

        DataDto data = new DataDto
        {
            GroupId = groupId,
            CoderList = coderIds
        };

        await coderService.CoderSelectedAsync(data);
        await emailService.SendEmailCompany(groupId);
    }

    
    
    
    
    
    
    
    
    
    
    // Logica para la carga de la foto del grupo
    private async Task UploadPhoto(IBrowserFile file)
    {

        if(!string.IsNullOrEmpty(groupId))
        {
            if(file != null)
            {
                var stream = file.OpenReadStream(2 * 1024 * 1024);

                await GroupService.UploadGroupPhoto(groupId, stream, file.Name);
                await LoadGroupDetailsAsync();
            }
            else
            {
                Console.WriteLine("No file selected");
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupDetailsAsync();
    }

    private void ToggleEditState()
    {
        if (isEditing)
        {
            UpdateGroup();
        }
        else
        {
            EnableEditMode();
        }

        isEditing = !isEditing;
    }

    private void EnableEditMode()
    {
        Console.WriteLine("Modo de edición habilitado");
    }

    // Actualiza la lista de coders filtrados
    private void UpdateCoders(List<Coder> filteredCoders)
    {
        _coders = filteredCoders;
    }

    // Alternar estado del drawer
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task UpdateGroup()
    {
        // Mostrar alerta de confirmación
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Estás seguro/a de guardar los cambios?",
            Text = "Esta acción actualizará la información y no podrá recuperarse.",
            ShowCancelButton = true,
            ShowConfirmButton = true,
            ConfirmButtonColor = RiwiPalette.Secondary500,
            ConfirmButtonText = "Si, Confirmar",
            CancelButtonColor = RiwiPalette.FeedbackDanger500,
            
        });


        // Si el usuario confirma, proceder con la actualización
        if (result.IsConfirmed)
        {
            // Llamada al servicio para actualizar el _group
            var response = await GroupService.Update(_group);

            if (response)
            {
                // Cambiar de vuelta al modo de visualización
                isEditing = false;

                // Mostrar mensaje de éxito
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Los cambios guardados exitosamente",
                    Icon = SweetAlertIcon.Success,
                    ShowConfirmButton = false,
                    Timer = 1500
                });

                // Navegar a otra página si es necesario
                NavigationManager.NavigateTo($"/GroupDetails/{groupId}");
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error al intentar guardar los cambios",
                    Icon = SweetAlertIcon.Error,
                    ShowConfirmButton = false,
                    Timer = 1500
                });            
            }
        }
    }

    private async Task LoadGroupDetailsAsync()
    {
        try
        {
            _group = await GroupService.GetGroupByIdAsync(groupId);
            if (_group != null)
            {
                Console.WriteLine($"Grupo obtenido: {_group.Name}, Estado: {_group.Status}, {_group.Photo}");
            }
            else
            {
                _errorMessage = "No se encontró el grupo.";
            }
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = "Error de red al obtener los detalles del grupo.";
            Console.WriteLine($"Error de red: {ex.Message}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Hubo un error al obtener los detalles del grupo: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }


    // Filtro de búsqueda
    private Func<Models.Group, bool> QuickFilter => group =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(group);
    };

    private bool MatchesSearchCriteria(Models.Group group)
    {
        return (group.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (group.Status?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (group.Created_At.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }
    
}
}