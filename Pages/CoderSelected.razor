@page "/CoderSelectedClient/{groupId}"
@layout LoginLayout
@inject IGroupService GroupService
@inject SweetAlertService Swal;
@inject AlertService AlertService;
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>RiwiTalent: Elige el mejor talento Riwi</PageTitle>

<AuthorizeView>
    <Authorized>
            @if (_loading)
            {
                <ProgressComponent />
            }
            else
            {
                <!-- Drawer para filtro -->
                <MudDrawer @bind-Open="_drawerOpen" Anchor="Anchor.Right" Overlay="true" OverlayAutoClose="true"
                    Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Never" Elevation="1" Class="rounded ma-2">
                    <CoderFilterComponent OnFiltered="UpdateCoders" />
                </MudDrawer>

                <!-- Detalles del grupo  -->
                <MudContainer Class="ma-3 d-flex flex-column flex-grow-1 justify-center align-content-start">
                    
                    <MudGrid Justify="Justify.SpaceBetween" Spacing="3">
                        <!-- Card con Avatar y Nombre del Grupo -->
                        <MudItem xs="12" sm="4" md="4">

                            <MudCard Class="d-flex flex-column align-center justify-center mud-width-full pa-4">

                                <AvatarComponent
                                    AvatarUrl="@_group.Photo"
                                    TypeAvatar="Group"
                                    FirstName="@_group.Name"
                                    Style="height:150px; width:150px; font-size:2rem;"/>
                                
                                <MudText Typo="Typo.h4" Color="Color.Primary"><b>@_group.Name</b></MudText>

                                <!-- Componente de status del grupo -->
                                <StatusChipComponent Status="@_group.Status"/>
                                
                                <MudItem Class="d-flex mt-3">
                                    
                                    <!-- Componente de subida de archivo -->
                                    @if(isEditing == true)
                                    {
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadPhoto" @bind-Value="_files" MaximumFileCount="2000000">
                                        <ActivatorContent>
                                            <MudTooltip Text="Sube una imagen">
                                                <MudFab Color="Color.Success" Size="Size.Medium"
                                                        StartIcon="@Icons.Material.Filled.AddPhotoAlternate"/>
                                            </MudTooltip>
                                        </ActivatorContent>
                                    </MudFileUpload>
                                    }
                                </MudItem>
                            </MudCard>
                        </MudItem>

                    <!-- Card con Información del Grupo y Credenciales -->
                    <MudItem xs="12" sm="8" md="8">
                        <MudCard Class="d-flex pa-4">
                            <MudCardContent Class="FullWidth">
                                <MudForm Spacing="2">

                                    <!-- Título: Información del Grupo -->
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudText Align="Align.Start" Typo="Typo.h5"><b>Selección de coders</b></MudText>
                                        </MudItem>


                                        <!-- Link Público -->
                                        <MudItem xs="12" sm="12" md="6">
                                            <MudText Typo="Typo.subtitle2"><b>Enlace público</b></MudText>
                                            <MudItem>
                                                <MudTextField T="string"
                                                              @bind-Value="_group.ExternalKeys[0].Url"
                                                              Placeholder="Ingresa el enlace público del grupo"
                                                              Variant="Variant.Outlined"
                                                              Margin="Margin.Dense"
                                                              FullWidth="true"
                                                              AdornmentIcon="@Icons.Material.Rounded.InsertLink"
                                                              Adornment="Adornment.Start"
                                                              AdornmentColor="Color.Primary"
                                                              ReadOnly="!isEditing">
                                                </MudTextField>
                                            </MudItem>
                                        </MudItem>

                                    </MudGrid>
                                </MudForm>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                </MudGrid>
                </MudContainer>
            }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public string? groupId { get; set; }

    private IBrowserFile _files;
    private Group _group;
    private List<Coder> _coders;
    private string _searchString;
    private bool _loading = true;
    private string _errorMessage;
    private string _rowsPerPageString = "Filas por página:";
    private string _infoFormat = "{first_item}-{last_item} de {all_items}";
    private bool isEditing = false;
    private bool _drawerOpen = false;

    
    // Logica para la carga de la foto del grupo
    private async Task UploadPhoto(IBrowserFile file)
    {

        if(!string.IsNullOrEmpty(groupId))
        {
            if(file != null)
            {
                var stream = file.OpenReadStream(2 * 1024 * 1024);

                await GroupService.UploadGroupPhoto(groupId, stream, file.Name);
                await LoadGroupDetailsAsync();
            }
            else
            {
                Console.WriteLine("No file selected");
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadGroupDetailsAsync();
    }

    private void ToggleEditState()
    {
        if (isEditing)
        {
            UpdateGroup();
        }
        else
        {
            EnableEditMode();
        }

        isEditing = !isEditing;
    }

    private void EnableEditMode()
    {
        Console.WriteLine("Modo de edición habilitado");
    }

    // Actualiza la lista de coders filtrados
    private void UpdateCoders(List<Coder> filteredCoders)
    {
        _coders = filteredCoders;
    }

    // Alternar estado del drawer
    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task UpdateGroup()
    {
        // Mostrar alerta de confirmación
        var result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "¿Estás seguro/a de guardar los cambios?",
            Text = "Esta acción actualizará la información y no podrá recuperarse.",
            ShowCancelButton = true,
            ShowConfirmButton = true,
            ConfirmButtonColor = RiwiPalette.Secondary500,
            ConfirmButtonText = "Si, Confirmar",
            CancelButtonColor = RiwiPalette.FeedbackDanger500,
            
        });


        // Si el usuario confirma, proceder con la actualización
        if (result.IsConfirmed)
        {
            // Llamada al servicio para actualizar el _group
            var response = await GroupService.Update(_group);

            if (response)
            {
                // Cambiar de vuelta al modo de visualización
                isEditing = false;

                // Mostrar mensaje de éxito
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Los cambios guardados exitosamente",
                    Icon = SweetAlertIcon.Success,
                    ShowConfirmButton = false,
                    Timer = 1500
                });

                // Navegar a otra página si es necesario
                NavigationManager.NavigateTo($"/GroupDetails/{groupId}");
            }
            else
            {
                await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error al intentar guardar los cambios",
                    Icon = SweetAlertIcon.Error,
                    ShowConfirmButton = false,
                    Timer = 1500
                });            
            }
        }
    }

    private async Task LoadGroupDetailsAsync()
    {
        try
        {
            _group = await GroupService.GetGroupByIdAsync(groupId);
            if (_group != null)
            {
                Console.WriteLine($"Grupo obtenido: {_group.Name}, Estado: {_group.Status}, {_group.Photo}");
            }
            else
            {
                _errorMessage = "No se encontró el grupo.";
            }
        }
        catch (HttpRequestException ex)
        {
            _errorMessage = "Error de red al obtener los detalles del grupo.";
            Console.WriteLine($"Error de red: {ex.Message}");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Hubo un error al obtener los detalles del grupo: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }


    // Filtro de búsqueda
    private Func<Models.Group, bool> QuickFilter => group =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(group);
    };

    private bool MatchesSearchCriteria(Models.Group group)
    {
        return (group.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (group.Status?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (group.Created_At.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }
    
    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private async Task OnTokenRegenerated(bool isRegenerated)
    {
        if (isRegenerated)
        {
            await LoadGroupDetailsAsync(); // Cargar nuevamente los detalles del grupo
        }
        else
        {
            // Aquí podrías mostrar un mensaje de error al usuario
            Console.WriteLine("No se pudo regenerar el token.");
        }
    }
}
}