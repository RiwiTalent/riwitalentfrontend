@page "/HomeClient/{groupId}"
@inject ICoderService coderService
@inject IEmailService emailService
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@layout DefaultLayout


<PageTitle>RiwiTalent: Software de gesti√≥n talento Riwi</PageTitle>


<!-- <MudMainContent /> -->
<BannerCodersComponent />

<MudDrawer @bind-Open="_drawerOpen" Anchor="Anchor.Right" Overlay="true" OverlayAutoClose="true" Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Never" Elevation="1" Class="rounded-t ma-2 py-5 px-2">
    <SelectedCodersComponent AddCodersToGroupAsync="AddCodersToGroupAsync" SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" ButtonText = "@ButtonText"/>
</MudDrawer>

<MudStack Class="d-flex justify-end">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Code" Size="Size.Medium" OnClick="DrawerToggle" Class="fixed" Style="bottom: 20px; right: 20px;"/>
</MudStack>


@* <SelectedCodersComponent AddCodersToGroupAsync="AddCodersToGroupAsync" SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" /> *@
<CardComponent SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" groupId="@groupId" FilterInGroup = "@FilterInGroup"/>



@code {
    private bool _drawerOpen = false;

    [Parameter]
    public bool ButtonText { get; set; } = true;

    [Parameter]
    public string? groupId { get; set; }

    [Parameter]
    public bool? FilterInGroup { get; set; } = true;

    private List<Coder> _selectedCoders = new List<Coder>();

    protected override async Task OnInitializedAsync()
    {
        var getCookieExternal = await JSRuntime.InvokeAsync<string>("GetCookieExternal");
        if (getCookieExternal == null || getCookieExternal == "")
        {
            NavigationManager.NavigateTo($"/external-access/{groupId}");
        }
    }

    private void AddCoderHandler(Coder coder)
    {
        Console.WriteLine($"Coder agregado: {coder.FirstName} {coder.FirstLastName}");
       
    }

     private async Task AddCodersToGroupAsync()
    {
        if (string.IsNullOrEmpty(groupId) || _selectedCoders.Count == 0)
        {
            Console.WriteLine("Debes ingresar un ID de grupo y seleccionar coders.");
            return;
        }

        var coderIds = _selectedCoders.Select(c => c.Id).ToList();
        Console.WriteLine($"Enviando {coderIds.Count} coders al grupo {groupId}: {string.Join(", ", coderIds)}");

        DataDto data = new DataDto
        {
            GroupId = groupId,
            CoderList = coderIds
        };

        await coderService.CoderSelectedAsync(data);
        await emailService.SendEmailCompany(groupId);
    }

    public void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    

}