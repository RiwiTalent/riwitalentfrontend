@page "/coders/{groupId}"
@inject IGroupService GroupService
@inject ICoderService coderService
@layout MainLayout
@inject ISnackbar Snackbar
@inject HttpClient Http

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>RiwiTalent: Conecta Empresas con los Mejores Coders</PageTitle>

<head>
    <link rel="stylesheet" href="css/Coders.css">
    <link rel="stylesheet" href="css/Components/PaginationComponent.css">   
</head>


@if (!string.IsNullOrEmpty(_errorMessage))
{
    <!-- Muestra alerta si se produce un error -->
    Snackbar.Add(_errorMessage, Severity.Error);
}


<MudDrawer @bind-Open="_drawerOpen" Anchor="Anchor.Right" Overlay="true" OverlayAutoClose="true" Variant="DrawerVariant.Temporary" ClipMode="DrawerClipMode.Never" Elevation="1" Class="rounded-t ma-2 py-5 px-2">
    <SelectedCodersComponent AddCodersToGroupAsync="AddCodersToGroupAsync" SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" ButtonText = "@ButtonText"/>
</MudDrawer>

<MudStack Class="d-flex justify-end">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Rounded.Code" Size="Size.Medium" OnClick="DrawerToggle" Class="fixed" Style="bottom: 20px; right: 20px;"/>
</MudStack>

<AuthorizeView>
    <Authorized>
        <MudText Color="Color.Primary" class="title">
        </MudText>

        
        <BannerCodersComponent />
        <SelectedCodersComponent AddCodersToGroupAsync="AddCodersToGroupAsync" SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" ButtonText = "@ButtonText" />
        <CardComponent SelectedCoders="@_selectedCoders" OnCoderAdded="AddCoderHandler" /> 
    </Authorized>
</AuthorizeView>

@code {
    private bool _drawerOpen = false;

    private string _errorMessage;

    [Parameter] 
    public bool? ButtonText { get; set; } = false;

    [Parameter]
    public bool? FilterInGroup { get; set; } = false;

    [Parameter] 
    public Group? Group { get; set; }
    [Parameter]
    public string? groupId { get; set; }

    private List<Coder> _selectedCoders = new List<Coder>();

    private void AddCoderHandler(Coder coder)
    {
        Console.WriteLine($"Coder agregado: {coder.FirstName} {coder.FirstLastName}");

    }

     private async Task AddCodersToGroupAsync()
    {


        _errorMessage = string.Empty; // Limpiar el mensaje de error al comenzar
        
        if (string.IsNullOrEmpty(groupId) || _selectedCoders.Count == 0)
        {
           _errorMessage ="Debes ingresar un ID de grupo y seleccionar coders.";
            return;
        }

        var coderIds = _selectedCoders.Select(c => c.Id).ToList();
       _errorMessage = $"Agregando {coderIds.Count} coders al grupo {groupId}: {string.Join(", ", coderIds)}";

        DataDto data = new DataDto
        {
            GroupId = groupId,
            CoderList = coderIds
        };

        await coderService.CodersGroupedAsync(data);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}